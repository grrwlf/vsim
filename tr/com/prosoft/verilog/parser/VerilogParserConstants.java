/* Generated By:JavaCC: Do not edit this line. VerilogParserConstants.java */
package com.prosoft.verilog.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface VerilogParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_FEED = 2;
  /** RegularExpression Id. */
  int CARRIAGE_RETURN = 3;
  /** RegularExpression Id. */
  int IFDEF = 9;
  /** RegularExpression Id. */
  int IFNDEF = 10;
  /** RegularExpression Id. */
  int ENDIF = 11;
  /** RegularExpression Id. */
  int PREP_ELSE = 12;
  /** RegularExpression Id. */
  int ELSEIF = 13;
  /** RegularExpression Id. */
  int INCLUDE = 14;
  /** RegularExpression Id. */
  int DEFINE = 15;
  /** RegularExpression Id. */
  int TIMESCALE = 16;
  /** RegularExpression Id. */
  int UNDEF = 17;
  /** RegularExpression Id. */
  int CELLDEFINE = 18;
  /** RegularExpression Id. */
  int STRING = 19;
  /** RegularExpression Id. */
  int MACRO_NAME = 20;
  /** RegularExpression Id. */
  int KEY_OR = 21;
  /** RegularExpression Id. */
  int ONE_LINE_COMMENT = 23;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 24;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 25;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 26;
  /** RegularExpression Id. */
  int SPECIFYBLOCK = 27;
  /** RegularExpression Id. */
  int TABLE = 28;
  /** RegularExpression Id. */
  int OUTPUT_SYMBOL = 29;
  /** RegularExpression Id. */
  int LEVEL_SYMBOL = 30;
  /** RegularExpression Id. */
  int EDGE_SYMBOL = 31;
  /** RegularExpression Id. */
  int ENDTABLE = 32;
  /** RegularExpression Id. */
  int OUT = 33;
  /** RegularExpression Id. */
  int DASH = 34;
  /** RegularExpression Id. */
  int GATETYPE = 36;
  /** RegularExpression Id. */
  int NET_TYPE = 37;
  /** RegularExpression Id. */
  int UNSIGNED_NUMBER = 38;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT = 39;
  /** RegularExpression Id. */
  int REAL_NUMBER = 40;
  /** RegularExpression Id. */
  int LPAREN = 41;
  /** RegularExpression Id. */
  int RPAREN = 42;
  /** RegularExpression Id. */
  int LBRACE = 43;
  /** RegularExpression Id. */
  int RBRACE = 44;
  /** RegularExpression Id. */
  int LBRACKET = 45;
  /** RegularExpression Id. */
  int RBRACKET = 46;
  /** RegularExpression Id. */
  int SEMICOLON = 47;
  /** RegularExpression Id. */
  int COMMA = 48;
  /** RegularExpression Id. */
  int COLON = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int SHARP = 51;
  /** RegularExpression Id. */
  int ASSIGN = 52;
  /** RegularExpression Id. */
  int GT = 53;
  /** RegularExpression Id. */
  int LT = 54;
  /** RegularExpression Id. */
  int BANG = 55;
  /** RegularExpression Id. */
  int TILDE = 56;
  /** RegularExpression Id. */
  int EQ = 57;
  /** RegularExpression Id. */
  int LE = 58;
  /** RegularExpression Id. */
  int GE = 59;
  /** RegularExpression Id. */
  int NE = 60;
  /** RegularExpression Id. */
  int OR = 61;
  /** RegularExpression Id. */
  int AND = 62;
  /** RegularExpression Id. */
  int INCR = 63;
  /** RegularExpression Id. */
  int DECR = 64;
  /** RegularExpression Id. */
  int PLUS = 65;
  /** RegularExpression Id. */
  int MINUS = 66;
  /** RegularExpression Id. */
  int SLASH = 67;
  /** RegularExpression Id. */
  int BIT_AND = 68;
  /** RegularExpression Id. */
  int BIT_OR = 69;
  /** RegularExpression Id. */
  int XOR = 70;
  /** RegularExpression Id. */
  int REM = 71;
  /** RegularExpression Id. */
  int LSHIFT = 72;
  /** RegularExpression Id. */
  int STAR_RIGHT_CARET = 73;
  /** RegularExpression Id. */
  int ASSIGN_RIGHT_CARET = 74;
  /** RegularExpression Id. */
  int INTEGER = 75;
  /** RegularExpression Id. */
  int REAL = 76;
  /** RegularExpression Id. */
  int REALTIME = 77;
  /** RegularExpression Id. */
  int TIME = 78;
  /** RegularExpression Id. */
  int MODULE = 79;
  /** RegularExpression Id. */
  int ENDMODULE = 80;
  /** RegularExpression Id. */
  int SPECIFY = 81;
  /** RegularExpression Id. */
  int ENDSPECIFY = 82;
  /** RegularExpression Id. */
  int SPECPARAM = 83;
  /** RegularExpression Id. */
  int INPUT = 84;
  /** RegularExpression Id. */
  int OUTPUT = 85;
  /** RegularExpression Id. */
  int INOUT = 86;
  /** RegularExpression Id. */
  int REG = 87;
  /** RegularExpression Id. */
  int STRENGTH0 = 88;
  /** RegularExpression Id. */
  int STRENGTH1 = 89;
  /** RegularExpression Id. */
  int HIGHZ0 = 90;
  /** RegularExpression Id. */
  int HIGHZ1 = 91;
  /** RegularExpression Id. */
  int IFNONE = 92;
  /** RegularExpression Id. */
  int POSEDGE = 93;
  /** RegularExpression Id. */
  int NEGEDGE = 94;
  /** RegularExpression Id. */
  int VECTORED = 95;
  /** RegularExpression Id. */
  int SCALARED = 96;
  /** RegularExpression Id. */
  int TASK = 97;
  /** RegularExpression Id. */
  int FUNCTION = 98;
  /** RegularExpression Id. */
  int AUTOMATIC = 99;
  /** RegularExpression Id. */
  int BEGIN = 100;
  /** RegularExpression Id. */
  int END = 101;
  /** RegularExpression Id. */
  int CASE = 102;
  /** RegularExpression Id. */
  int CASEX = 103;
  /** RegularExpression Id. */
  int CASEZ = 104;
  /** RegularExpression Id. */
  int SMALL = 105;
  /** RegularExpression Id. */
  int LARGE = 106;
  /** RegularExpression Id. */
  int MEDIUM = 107;
  /** RegularExpression Id. */
  int ALWAYS = 108;
  /** RegularExpression Id. */
  int INITIAL = 109;
  /** RegularExpression Id. */
  int REPEAT = 110;
  /** RegularExpression Id. */
  int PRIMITIVE = 111;
  /** RegularExpression Id. */
  int ENDPRIMITIVE = 112;
  /** RegularExpression Id. */
  int DEFAULT1 = 113;
  /** RegularExpression Id. */
  int SIGNED = 114;
  /** RegularExpression Id. */
  int FORCE = 115;
  /** RegularExpression Id. */
  int ASSIGN_KEY = 116;
  /** RegularExpression Id. */
  int RELEASE = 117;
  /** RegularExpression Id. */
  int ENDCASE = 118;
  /** RegularExpression Id. */
  int DEASSIGN = 119;
  /** RegularExpression Id. */
  int PARAMETER = 120;
  /** RegularExpression Id. */
  int IF = 121;
  /** RegularExpression Id. */
  int ELSE = 122;
  /** RegularExpression Id. */
  int IDENTIFIER = 123;
  /** RegularExpression Id. */
  int LETTER = 124;
  /** RegularExpression Id. */
  int BACKSLASH = 125;
  /** RegularExpression Id. */
  int non_zero_decimal_digit = 126;
  /** RegularExpression Id. */
  int binary_digit = 127;
  /** RegularExpression Id. */
  int octal_digit = 128;
  /** RegularExpression Id. */
  int decimal_digit = 129;
  /** RegularExpression Id. */
  int hex_digit = 130;
  /** RegularExpression Id. */
  int non_zero_unsigned_number1 = 131;
  /** RegularExpression Id. */
  int unsigned_number1 = 132;
  /** RegularExpression Id. */
  int binary_value1 = 133;
  /** RegularExpression Id. */
  int octal_value1 = 134;
  /** RegularExpression Id. */
  int hex_value1 = 135;
  /** RegularExpression Id. */
  int hex_base1 = 136;
  /** RegularExpression Id. */
  int apostrophed_number = 137;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_TABLE_BLOCK = 1;
  /** Lexical state. */
  int IN_ONE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 3;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 4;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 5;
  /** Lexical state. */
  int IN_SPECIFY_BLOCK = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"`ifdef\"",
    "\"`ifndef\"",
    "\"`endif\"",
    "\"`else\"",
    "\"`elseif\"",
    "\"`include\"",
    "<DEFINE>",
    "\"`timescale\"",
    "\"`undef\"",
    "\"`celldefine\"",
    "<STRING>",
    "<MACRO_NAME>",
    "\"or\"",
    "\"//\"",
    "<ONE_LINE_COMMENT>",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<MULTI_LINE_COMMENT>",
    "\"endspecify\"",
    "\"table\"",
    "<OUTPUT_SYMBOL>",
    "<LEVEL_SYMBOL>",
    "<EDGE_SYMBOL>",
    "\"endtable\"",
    "<OUT>",
    "\"-\"",
    "<token of kind 35>",
    "<GATETYPE>",
    "<NET_TYPE>",
    "<UNSIGNED_NUMBER>",
    "<DECIMAL_DIGIT>",
    "<REAL_NUMBER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"#\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"*>\"",
    "\"=>\"",
    "\"integer\"",
    "\"real\"",
    "\"realtime\"",
    "\"time\"",
    "\"module\"",
    "\"endmodule\"",
    "\"specify\"",
    "\"endspecify\"",
    "\"specparam\"",
    "\"input\"",
    "\"output\"",
    "\"inout\"",
    "\"reg\"",
    "<STRENGTH0>",
    "<STRENGTH1>",
    "\"highz0\"",
    "\"highz1\"",
    "\"ifnone\"",
    "<POSEDGE>",
    "<NEGEDGE>",
    "<VECTORED>",
    "<SCALARED>",
    "\"task\"",
    "\"function\"",
    "\"automatic\"",
    "\"begin\"",
    "\"end\"",
    "\"case\"",
    "\"casex\"",
    "\"casez\"",
    "\"small\"",
    "\"large\"",
    "\"medium\"",
    "\"always\"",
    "\"initial\"",
    "\"repeat\"",
    "\"primitive\"",
    "\"endprimitive\"",
    "\"default\"",
    "\"signed\"",
    "\"force\"",
    "\"assign\"",
    "\"release\"",
    "\"endcase\"",
    "\"deassign\"",
    "\"parameter\"",
    "\"if\"",
    "\"else\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "\"\\\\\"",
    "<non_zero_decimal_digit>",
    "<binary_digit>",
    "<octal_digit>",
    "<decimal_digit>",
    "<hex_digit>",
    "<non_zero_unsigned_number1>",
    "<unsigned_number1>",
    "<binary_value1>",
    "<octal_value1>",
    "<hex_value1>",
    "<hex_base1>",
    "<apostrophed_number>",
    "\"(*\"",
    "\"*)\"",
    "\"~&\"",
    "\"~|\"",
    "\"~^\"",
    "\"^~\"",
    "\"*\"",
    "\"?\"",
    "\">>\"",
    "\"<<<\"",
    "\">>>\"",
    "\"@\"",
  };

}
