/* Generated By:JavaCC: Do not edit this line. VerilogParser.java */
package com.prosoft.verilog.parser; // put a package name here if desired

import com.prosoft.verilog.ir.*;
import com.prosoft.common.*;

import java.util.*;

@SuppressWarnings("all")
public class VerilogParser extends VParserBase implements VerilogParserConstants {
    public final static String version = ".99";
    protected void setTokenSource( VerilogParserTokenManager man ) {
        token_source = man;
    }
    protected VerilogParserTokenManager getTokenSource() {
        return token_source;
    }

/*
binary_number ::= [ size ] binary_base binary_value
octal_number ::= [ size ] octal_base octal_value
hex_number ::= [ size ] hex_base hex_value
sign ::= + | -
size ::= non_zero_unsigned_number
non_zero_unsigned_number1 ::= non_zero_decimal_digit { _ | decimal_digit}
unsigned_number1 ::= decimal_digit { _ | decimal_digit }
binary_value1 ::= binary_digit { _ | binary_digit }
octal_value1 ::= octal_digit { _ | octal_digit }
hex_value1 ::= hex_digit { _ | hex_digit }
decimal_base1 ::= ’[s|S]d | ’[s|S]D
binary_base1 ::= ’[s|S]b | ’[s|S]B
octal_base1 ::= ’[s|S]o | ’[s|S]O
hex_base1 ::= ’[s|S]h | ’[s|S]H
non_zero_decimal_digit ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
decimal_digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
binary_digit ::= x_digit | z_digit | 0 | 1
octal_digit ::= x_digit | z_digit | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
*/



/*****************************************
 * THE VERILOG SUBSET LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/
/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
                disable_tracing();
    source_text();
    jj_consume_token(0);
  }

  final public void source_text() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CELLDEFINE:
      case MODULE:
      case PRIMITIVE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      description();
    }
  }

  final public void description() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      module_declaration();
      break;
    case CELLDEFINE:
      jj_consume_token(CELLDEFINE);
      break;
    case PRIMITIVE:
      udp_declaration();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* here is the official spec grammar  - Nov 5 2002
module_declaration ::=
module_keyword module_identifier [ list_of_ports ] ; { module_item } endmodule
module_keyword ::= module | macromodule
list_of_ports ::= ( port { , port } )
port ::=
[ port_expression ]
| . port_identifier ( [ port_expression ] )
port_expression ::=
port_reference
| { port_reference { , port_reference} }
port_reference ::=
port_identifier
| port_identifier [ constant_expression ]
| port_identifier [ msb_constant_expression : lsb_constant_expression ]

*/
  final public void module_declaration() throws ParseException {
  Token name; VModule module;
    jj_consume_token(MODULE);
    name = jj_consume_token(IDENTIFIER);
                                   module =  new VModule(env(), name.image);setModule(module);push(module.getEnvironment());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Arguments();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GATETYPE:
      case NET_TYPE:
      case SPECIFY:
      case INPUT:
      case OUTPUT:
      case INOUT:
      case REG:
      case TASK:
      case ALWAYS:
      case INITIAL:
      case ASSIGN_KEY:
      case PARAMETER:
      case IDENTIFIER:
      case 138:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      module_item();
    }
    jj_consume_token(ENDMODULE);
   putModule(module);pop();
  }

  final public void module_parameter_port_list(VModule module) throws ParseException {
    jj_consume_token(SHARP);
    jj_consume_token(LPAREN);
    parameter_declaration(module);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      parameter_declaration(module);
    }
    jj_consume_token(RPAREN);
  }

  final public void parameter_declaration(IVParamHolder holder) throws ParseException {
  VType type; VOperRange range=null; boolean signed=false;
    jj_consume_token(PARAMETER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case REAL:
    case REALTIME:
    case TIME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
                                     type = new VTypeInteger();
        break;
      case REAL:
        jj_consume_token(REAL);
                                  type = new VTypeReal();
        break;
      case REALTIME:
        jj_consume_token(REALTIME);
                                      type = new VTypeRealTime();
        break;
      case TIME:
        jj_consume_token(TIME);
                                  type = new VTypeTime();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNED:
        jj_consume_token(SIGNED);
                             signed=true;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        range = range();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                                                                  type=new VTypeVector(range, signed);
    }
    list_of_param_assignments(holder, type);
    jj_consume_token(SEMICOLON);
  }

  final public void list_of_param_assignments(IVParamHolder holder, VType type) throws ParseException {
    param_assignment(holder, type);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      param_assignment(holder, type);
    }
  }

  final public void param_assignment(IVParamHolder holder, VType type) throws ParseException {
  Token name; VOper expr;
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    expr = expression();
                TextCoord b = begin();
                VParameter param = new VParameter(((VNamedElement)holder).getEnvironment(), name.image, type, expr);
                param.setBegin(b);
                holder.add(param);
  }

  final public void module_item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NET_TYPE:
    case INPUT:
    case OUTPUT:
    case INOUT:
    case REG:
    case TASK:
    case ALWAYS:
    case INITIAL:
    case ASSIGN_KEY:
    case PARAMETER:
    case 138:
      module_item_decl();
      break;
    case GATETYPE:
      GateInstantiation();
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_1(3)) {
        module_instantiation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          udp_instantiation();
          break;
        case SPECIFY:
          specify_block();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void module_or_generate_item() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      attribute_instance();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN_KEY:
      continuous_assign();
      break;
    case ALWAYS:
    case INITIAL:
      initial_or_always_construct();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void continuous_assign() throws ParseException {
  DriveStrength ds = null; VOper delay = null;
    jj_consume_token(ASSIGN_KEY);
    if (jj_2_2(2)) {
      ds = drive_strength();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      delay = delay3();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    net_assignment(ds, delay);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      net_assignment(ds, delay);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void net_assignment(DriveStrength ds, VOper delay) throws ParseException {
  VOper l, r; VAssignStatement res; TextCoord c = begin();
    l = expression();
    jj_consume_token(ASSIGN);
    r = expression();
         res = new VAssignStatement(l, VAssignKind.EQ, r, ds, delay); res.setBegin(c); res.setEnd(end()); module().addConcurrent(res);
  }

  final public void initial_or_always_construct() throws ParseException {
 VStatement stat; String name = null; boolean isAlways = false; TextCoord c = begin(); VInitialOrAlways res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIAL:
      jj_consume_token(INITIAL);
      break;
    case ALWAYS:
      jj_consume_token(ALWAYS);
                               isAlways = true;
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    stat = statement();
         res = new VInitialOrAlways(module(), name, stat, isAlways); res.setBegin(c); c = end(); res.setEnd(c); module().add(res);
  }

  final public void attribute_instance() throws ParseException {
    jj_consume_token(138);
    attr_spec();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      attr_spec();
    }
    jj_consume_token(139);
  }

  final public void attr_spec() throws ParseException {
    if (jj_2_3(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void specify_block() throws ParseException {
    jj_consume_token(SPECIFY);
    label_8:
    while (true) {
      specify_item();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case SPECPARAM:
      case IFNONE:
      case IF:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(ENDSPECIFY);
  }

  final public void specify_item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECPARAM:
      specparam_declaration();
      break;
    case LPAREN:
    case IFNONE:
    case IF:
      path_declaration();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void specparam_declaration() throws ParseException {
    jj_consume_token(SPECPARAM);
    list_of_specparam_assignments();
    jj_consume_token(SEMICOLON);
  }

  final public void list_of_specparam_assignments() throws ParseException {
    specparam_assignment();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      specparam_assignment();
    }
  }

  final public void specparam_assignment() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    constant_expression();
  }

  final public void path_declaration() throws ParseException {
    if (jj_2_4(4)) {
      simple_path_declaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        edge_sensitive_path_declaration();
        jj_consume_token(SEMICOLON);
        break;
      case IFNONE:
      case IF:
        state_dependent_path_declaration();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
edge_sensitive_path_declaration ::=
parallel_edge_sensitive_path_description = path_delay_value
| full_edge_sensitive_path_description = path_delay_value

parallel_edge_sensitive_path_description ::=
( [ edge_identifier ] specify_input_terminal_descriptor =>
specify_output_terminal_descriptor [ polarity_operator ] : data_source_expression ) )

full_edge_sensitive_path_description ::=
( [ edge_identifier ] list_of_path_inputs *>
list_of_path_outputs [ polarity_operator ] : data_source_expression ) )

data_source_expression ::= expression
edge_identifier ::= posedge | negedge
*/
  final public void edge_sensitive_path_declaration() throws ParseException {
    parallel_edge_sensitive_path_description();
    jj_consume_token(ASSIGN);
    path_delay_value();
  }

  final public void parallel_edge_sensitive_path_description() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSEDGE:
    case NEGEDGE:
      edge_identifier();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    specify_input_terminal_descriptor();
    jj_consume_token(ASSIGN_RIGHT_CARET);
    jj_consume_token(LPAREN);
    specify_output_terminal_descriptor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      polarity_operator();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    expression();
    jj_consume_token(RPAREN);
    jj_consume_token(RPAREN);
  }

  final public void edge_identifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSEDGE:
      jj_consume_token(POSEDGE);
      break;
    case NEGEDGE:
      jj_consume_token(NEGEDGE);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simple_path_declaration() throws ParseException {
    if (jj_2_5(3)) {
      parallel_path_description();
      jj_consume_token(ASSIGN);
      path_delay_value();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        full_path_description();
        jj_consume_token(ASSIGN);
        path_delay_value();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void path_delay_value() throws ParseException {
    if (jj_2_6(3)) {
      list_of_path_delay_expressions();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        list_of_path_delay_expressions();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void list_of_path_delay_expressions() throws ParseException {
    path_delay_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      path_delay_expression();
    }
  }

  final public void path_delay_expression() throws ParseException {
    constant_mintypmax_expression();
  }

  final public void full_path_description() throws ParseException {
    jj_consume_token(LPAREN);
    list_of_path_inputs();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      polarity_operator();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(STAR_RIGHT_CARET);
    list_of_path_outputs();
    jj_consume_token(RPAREN);
  }

  final public void list_of_path_inputs() throws ParseException {
    specify_input_terminal_descriptor();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      specify_input_terminal_descriptor();
    }
  }

  final public void list_of_path_outputs() throws ParseException {
    specify_output_terminal_descriptor();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      specify_output_terminal_descriptor();
    }
  }

/*
parallel_path_description ::=
( specify_input_terminal_descriptor [ polarity_operator ] => specify_output_terminal_descriptor )
*/
  final public void parallel_path_description() throws ParseException {
    jj_consume_token(LPAREN);
    specify_input_terminal_descriptor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      polarity_operator();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN_RIGHT_CARET);
    specify_output_terminal_descriptor();
    jj_consume_token(RPAREN);
  }

  final public void polarity_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void specify_input_terminal_descriptor() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
specify_output_terminal_descriptor ::=
output_identifier
| output_identifier [ constant_expression ]
| output_identifier [ msb_constant_expression : lsb_constant_expression ]
*/
  final public void specify_output_terminal_descriptor() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
state_dependent_path_declaration ::=
if ( conditional_expression ) simple_path_declaration
| if ( conditional_expression ) edge_sensitive_path_declaration
| ifnone simple_path_declaration
*/
  final public void state_dependent_path_declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      conditional_expression();
      jj_consume_token(RPAREN);
      simple_or_edge_decl();
      break;
    case IFNONE:
      jj_consume_token(IFNONE);
      simple_path_declaration();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simple_or_edge_decl() throws ParseException {
    if (jj_2_7(4)) {
      simple_path_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        edge_sensitive_path_declaration();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
void conditional_expression() :
{}
{
  expression()   // supposedly more restrictive than this but for now let's just use expr 
}
*/
  final public void udp_instantiation() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_8(2)) {
      drive_strength();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      delay2();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    udp_instance();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      udp_instance();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void udp_instance() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name_of_udp_instance();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    output_port_connection();
    jj_consume_token(COMMA);
    input_port_connection();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      input_port_connection();
    }
    jj_consume_token(RPAREN);
  }

/*
ordered_port_connection ::= [ expression ]
named_port_connection ::= . port_identifier ( [ expression ] )
*/
  final public void input_port_connection() throws ParseException {
    list_of_module_connections(null);
  }

  final public void output_port_connection() throws ParseException {
    ordered_port_connection();
  }

  final public void name_of_udp_instance() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      range();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public DriveStrength drive_strength() throws ParseException {
    if (jj_2_9(3)) {
      jj_consume_token(LPAREN);
      jj_consume_token(STRENGTH0);
      jj_consume_token(COMMA);
      jj_consume_token(STRENGTH1);
      jj_consume_token(RPAREN);
    } else if (jj_2_10(2)) {
      jj_consume_token(LPAREN);
      jj_consume_token(STRENGTH1);
      jj_consume_token(COMMA);
      jj_consume_token(STRENGTH0);
      jj_consume_token(RPAREN);
    } else if (jj_2_11(2)) {
      jj_consume_token(LPAREN);
      jj_consume_token(STRENGTH0);
      jj_consume_token(COMMA);
      jj_consume_token(HIGHZ1);
      jj_consume_token(RPAREN);
    } else if (jj_2_12(2)) {
      jj_consume_token(LPAREN);
      jj_consume_token(HIGHZ1);
      jj_consume_token(COMMA);
      jj_consume_token(STRENGTH0);
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        jj_consume_token(HIGHZ0);
        jj_consume_token(COMMA);
        jj_consume_token(STRENGTH1);
        jj_consume_token(RPAREN);
   {if (true) throw new RuntimeException();}
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void delay2() throws ParseException {
    if (jj_2_13(2)) {
      jj_consume_token(SHARP);
      delay_value();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARP:
        jj_consume_token(SHARP);
        jj_consume_token(LPAREN);
        delay_value();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED_NUMBER:
        case REAL_NUMBER:
        case apostrophed_number:
          delay_value();
          jj_consume_token(COMMA);
          delay_value();
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public VOper delay3() throws ParseException {
    if (jj_2_14(2)) {
      jj_consume_token(SHARP);
      delay_value();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARP:
        jj_consume_token(SHARP);
        jj_consume_token(LPAREN);
        delay_value();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED_NUMBER:
        case REAL_NUMBER:
        case apostrophed_number:
          delay_value();
          jj_consume_token(COMMA);
          delay_value();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            delay_value();
            break;
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
   {if (true) throw new RuntimeException();}
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public VOper delay_value() throws ParseException {
  VOper res;
    /* delay_value ::= unsigned_number | parameter_identifier | constant_mintypmax_expression */
    //  LOOKAHEAD(2) <UNSIGNED_NUMBER>
    //  | constant_mintypmax_expression()
    
            res = number();
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void constant_mintypmax_expression() throws ParseException {
    if (jj_2_15(2)) {
      constant_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED_NUMBER:
      case REAL_NUMBER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case IDENTIFIER:
      case apostrophed_number:
      case 140:
      case 141:
      case 142:
      case 143:
        constant_expression();
        jj_consume_token(COLON);
        constant_expression();
        jj_consume_token(COLON);
        constant_expression();
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
unary_operator ::=
+ | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
*/

/*
//	& Reduction and
	RED_AND,
//	~& Reduction nand
	RED_NAND,
//	| Reduction or
	RED_OR,
//	~| Reduction nor
	RED_NOR,
//	^ Reduction xor
	RED_XOR,
//	~^ or ^~ Reduction xnor
	RED_XNOR;
*/
  final public VUnaryKind unary_operator() throws ParseException {
 VUnaryKind op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
          op = VUnaryKind.PLUS;
      break;
    case MINUS:
      jj_consume_token(MINUS);
             op = VUnaryKind.MINUS;
      break;
    case BANG:
      jj_consume_token(BANG);
            op = VUnaryKind.LNOT;
      break;
    case TILDE:
      jj_consume_token(TILDE);
         op = VUnaryKind.BNOT;
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
         op = VUnaryKind.RED_AND;
      break;
    case 140:
      jj_consume_token(140);
          op = VUnaryKind.RED_NAND;
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
         op = VUnaryKind.RED_OR;
      break;
    case 141:
      jj_consume_token(141);
          op = VUnaryKind.RED_NOR;
      break;
    case XOR:
      jj_consume_token(XOR);
         op = VUnaryKind.RED_XOR;
      break;
    case 142:
      jj_consume_token(142);
          op = VUnaryKind.RED_XNOR;
      break;
    case 143:
      jj_consume_token(143);
          op = VUnaryKind.RED_XNOR;
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/*
binary_operator ::=
+ | - | * | / | % | == | != | === | !== | && | ||
| < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | <<
*/
  final public void binary_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case 144:
      jj_consume_token(144);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void constant_expression() throws ParseException {
    expression();
  }

  final public void udp_declaration() throws ParseException {
    jj_consume_token(PRIMITIVE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    list_of_module_connections(null);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    label_15:
    while (true) {
      udp_port_declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
      case REG:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_15;
      }
    }
    udp_body();
    jj_consume_token(ENDPRIMITIVE);
  }

  final public void udp_port_declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTPUT:
      output_declaration();
      break;
    case INPUT:
      input_declaration();
      break;
    case REG:
      reg_declaration();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void udp_body() throws ParseException {
    if (jj_2_16(8000)) {
      combinational_body();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE:
      case INITIAL:
        sequential_body();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void combinational_body() throws ParseException {
    jj_consume_token(TABLE);
    label_16:
    while (true) {
      combinational_entry();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
      case LEVEL_SYMBOL:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_16;
      }
    }
    jj_consume_token(ENDTABLE);
  }

  final public void sequential_body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIAL:
      udp_initial_statement();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(TABLE);
    label_17:
    while (true) {
      sequential_entry();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
      case LEVEL_SYMBOL:
      case EDGE_SYMBOL:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_17;
      }
    }
    jj_consume_token(ENDTABLE);
  }

  final public void udp_initial_statement() throws ParseException {
    jj_consume_token(INITIAL);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    jj_consume_token(apostrophed_number);
  }

  final public void edge_input_list() throws ParseException {
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
      case LEVEL_SYMBOL:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
        jj_consume_token(OUTPUT_SYMBOL);
        break;
      case LEVEL_SYMBOL:
        jj_consume_token(LEVEL_SYMBOL);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    edge_indicator();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
      case LEVEL_SYMBOL:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
        jj_consume_token(OUTPUT_SYMBOL);
        break;
      case LEVEL_SYMBOL:
        jj_consume_token(LEVEL_SYMBOL);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void sequential_entry() throws ParseException {
    seq_input_list();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTPUT_SYMBOL:
      jj_consume_token(OUTPUT_SYMBOL);
      break;
    case LEVEL_SYMBOL:
      jj_consume_token(LEVEL_SYMBOL);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    next_state();
    jj_consume_token(SEMICOLON);
  }

  final public void seq_input_list() throws ParseException {
    if (jj_2_17(8000)) {
      edge_input_list();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
      case LEVEL_SYMBOL:
        level_input_list();
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void next_state() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTPUT_SYMBOL:
      jj_consume_token(OUTPUT_SYMBOL);
      break;
    case DASH:
      jj_consume_token(DASH);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void combinational_entry() throws ParseException {
    level_input_list();
    jj_consume_token(COLON);
    jj_consume_token(OUTPUT_SYMBOL);
    jj_consume_token(SEMICOLON);
  }

  final public void level_input_list() throws ParseException {
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
        jj_consume_token(OUTPUT_SYMBOL);
        break;
      case LEVEL_SYMBOL:
        jj_consume_token(LEVEL_SYMBOL);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
      case LEVEL_SYMBOL:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_20;
      }
    }
  }

  final public void edge_indicator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
        jj_consume_token(OUTPUT_SYMBOL);
        break;
      case LEVEL_SYMBOL:
        jj_consume_token(LEVEL_SYMBOL);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUT_SYMBOL:
        jj_consume_token(OUTPUT_SYMBOL);
        break;
      case LEVEL_SYMBOL:
        jj_consume_token(LEVEL_SYMBOL);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      break;
    case EDGE_SYMBOL:
      jj_consume_token(EDGE_SYMBOL);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
A.5 UDP declaration and instantiation

sequential_entry ::= seq_input_list : current_state : next_state ;
seq_input_list ::= level_input_list | edge_input_list
level_input_list ::= level_symbol { level_symbol }
edge_input_list ::= { level_symbol } edge_indicator { level_symbol }
*/
  final public void module_instantiation() throws ParseException {
  Token mType; ArrayList<VOper> p = new ArrayList<VOper>(); VOper op;
    /*
      module_instantiation ::=
          module_identifier [ parameter_value_assignment ] module_instance { , module_instance } ;
      parameter_value_assignment ::= # ( expression { , expression } )
    
    
    
      */
      mType = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      jj_consume_token(SHARP);
      jj_consume_token(LPAREN);
      op = expression();
                                   p.add(op);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        op = expression();
                                                 p.add(op);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    module_instance(mType, p);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      module_instance(mType, p);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void module_instance(Token name, ArrayList<VOper> params) throws ParseException {
 Token instName; VOperRange range=null; ArrayList<VOper> conn = new ArrayList<VOper>();
    /* module_instance ::= name_of_instance ( [ list_of_module_connections ] )
      name_of_instance ::= module_instance_identifier [ range ]
      */
      instName = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      range = range();
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case DOT:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case IDENTIFIER:
    case apostrophed_number:
    case 140:
    case 141:
    case 142:
    case 143:
      list_of_module_connections(conn);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
   createInst(name, params, range, instName, conn);
  }

  final public void list_of_module_connections(ArrayList<VOper> conn) throws ParseException {
 VOper op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      /*
        list_of_module_connections ::=
        ordered_port_connection { , ordered_port_connection }
        | named_port_connection { , named_port_connection }
        */
        op = named_port_connection();
                                conn.add(op);
      label_23:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(COMMA);
        op = named_port_connection();
                                                                                                    conn.add(op);
      }
      break;
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case IDENTIFIER:
    case apostrophed_number:
    case 140:
    case 141:
    case 142:
    case 143:
      op = expression();
                       conn.add(op);
      label_24:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_24;
        }
                                                      op=null;
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED_NUMBER:
        case REAL_NUMBER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case BIT_OR:
        case XOR:
        case IDENTIFIER:
        case apostrophed_number:
        case 140:
        case 141:
        case 142:
        case 143:
          op = expression();
          break;
        default:
          jj_la1[73] = jj_gen;
          ;
        }
                                                                                             conn.add(op);
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ordered_port_connection() throws ParseException {
    expression();
  }

  final public VNamedAssign named_port_connection() throws ParseException {
 VName name; VOper expr = null;
    jj_consume_token(DOT);
    name = identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case IDENTIFIER:
    case apostrophed_number:
    case 140:
    case 141:
    case 142:
    case 143:
      expr = expression();
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
   {if (true) return new VNamedAssign(name, expr);}
    throw new Error("Missing return statement in function");
  }

  final public void module_item_decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case OUTPUT:
    case INOUT:
      port_declaration();
      break;
    case NET_TYPE:
      net_declaration();
      break;
    case REG:
      reg_declaration();
      break;
    case ALWAYS:
    case INITIAL:
    case ASSIGN_KEY:
    case 138:
      module_or_generate_item();
      break;
    case TASK:
      task_declaration();
      break;
    case PARAMETER:
      parameter_declaration(module());
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void port_declaration() throws ParseException {
  Direction dir; boolean signed = false; VType type = VTypeVector.singleBit; VOperRange range; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      jj_consume_token(INPUT);
                         dir=Direction.INPUT;
      break;
    case INOUT:
      jj_consume_token(INOUT);
                           dir=Direction.INOUT;
      break;
    case OUTPUT:
      jj_consume_token(OUTPUT);
                            dir=Direction.OUTPUT;
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG:
      jj_consume_token(REG);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
      jj_consume_token(SIGNED);
                  signed=true;
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      range = range();
                          type=new VTypeVector(range, signed);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                          createPort(t, type, dir);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                               createPort(t, type, dir);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void input_declaration() throws ParseException {
    jj_consume_token(INPUT);
    optRngArgList();
    jj_consume_token(SEMICOLON);
  }

  final public void output_declaration() throws ParseException {
    jj_consume_token(OUTPUT);
    optRngArgList();
    jj_consume_token(SEMICOLON);
  }

  final public void inout_declaration() throws ParseException {
    jj_consume_token(INOUT);
    optRngArgList();
    jj_consume_token(SEMICOLON);
  }

  final public void reg_declaration() throws ParseException {
  VType type = VTypeVector.singleBit; VOperRange range; boolean signed = false; Token name; VOper init; VOperRange dim;
    jj_consume_token(REG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
      jj_consume_token(SIGNED);
             signed=true;
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      range = range();
                   type=new VTypeVector(range,signed);
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
   init=null;
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
    case ASSIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        init = expression();
        break;
      case LBRACKET:
        label_26:
        while (true) {
          dim = range();
                                 type = new VTypeArray("__array", dim, type);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[84] = jj_gen;
            break label_26;
          }
        }
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
     createVar(name,type, init);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_27;
      }
    init=null;
      jj_consume_token(COMMA);
      name = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        init = expression();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
                                                                 createVar(name,type, init);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void optRngArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      range();
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    ArgumentList();
  }

/* list_of_port_identifiers ::= port_identifier { , port_identifier } */
  final public VOperRange range() throws ParseException {
 VOper op1, op2;
    jj_consume_token(LBRACKET);
    op1 = expression();
    jj_consume_token(COLON);
    op2 = expression();
    jj_consume_token(RBRACKET);
    {if (true) return new VOperRange(op1, op2);}
    throw new Error("Missing return statement in function");
  }

  final public void net_declaration() throws ParseException {
 Token type; VectorScalarity s = VectorScalarity.NONE; ChargeStrength ch = null; DriveStrength dr = null;
        VOperRange range = null; VType vtype = VTypeVector.singleBit; VNetAttrib attrib;
    /*
    
    net_declaration ::=
    net_type [ vectored | scalared ] [range] [delay3] list_of_net_identifiers ;
    | trireg [ vectored | scalared ] [charge_strength] [range] [delay3] list_of_net_identifiers ;
    | net_type [ vectored | scalared ] [drive_strength] [range] [delay3] list_of_net_decl_assignments ;
    
    net_type ::= wire | tri | tri1 | supply0 | wand | triand | tri0 | supply1 | wor | trior
    
    */
      /* <NET_TYPE> ArgumentList() <SEMICOLON> */
      /*
        LOOKAHEAD(4) <NET_TYPE> [ <VECTORED> | <SCALARED> ] [drive_strength()] [range()] [delay3()] list_of_net_decl_assignments() ";"
      | <NET_TYPE> [range()]  list_of_identifiers() <SEMICOLON>
      | "trireg" [ LOOKAHEAD(2) charge_strength() ] ArgumentList() <SEMICOLON>  // to handle "trireg (large) B;"
      */
    
        type = jj_consume_token(NET_TYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VECTORED:
    case SCALARED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VECTORED:
        jj_consume_token(VECTORED);
        break;
      case SCALARED:
        jj_consume_token(SCALARED);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    if (jj_2_20(2147483647)) {
      ch = charge_strength();
    } else {
      ;
    }
    if (jj_2_21(2147483647)) {
      dr = drive_strength();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      range = range();
                      vtype = new VTypeVector(range, false);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      delay3();
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
     attrib = new VNetAttrib(type.image, s, dr, dr, ch, vtype);
    if (jj_2_22(2147483647)) {
      list_of_net_decl_assignments(attrib);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        list_of_identifiers(attrib);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  final public void list_of_net_decl_assignments(VNetAttrib attrib) throws ParseException {
    net_decl_assignment(attrib);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      net_decl_assignment(attrib);
    }
  }

  final public void net_decl_assignment(VNetAttrib attrib) throws ParseException {
 Token name; VOper init;
    /*net_identifier()*/ name = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    init = expression();
         createNet(attrib, name, init);
  }

  final public void list_of_identifiers(VNetAttrib attrib) throws ParseException {
 Token name;
    name = jj_consume_token(IDENTIFIER);
                       createNet(attrib, name, null);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      name = jj_consume_token(IDENTIFIER);
                                                                                  createNet(attrib, name, null);
    }
  }

  final public ChargeStrength charge_strength() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      t = jj_consume_token(SMALL);
      break;
    case LARGE:
      t = jj_consume_token(LARGE);
      break;
    case MEDIUM:
      t = jj_consume_token(MEDIUM);
      jj_consume_token(RPAREN);
     {if (true) return ChargeStrength.fromString(t.image);}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VSubProgram task_declaration() throws ParseException {
  VSubProgram res; boolean isAuto=false; Token name; VStatement stat;
    jj_consume_token(TASK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTOMATIC:
      jj_consume_token(AUTOMATIC);
                            isAuto=true;
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    name = jj_consume_token(IDENTIFIER);
                                                                res=new VSubProgram(module(), name.image, false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      task_port_list(res);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case INTEGER:
      case REAL:
      case REALTIME:
      case TIME:
      case INPUT:
      case OUTPUT:
      case INOUT:
      case REG:
      case SIGNED:
      case PARAMETER:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case INTEGER:
      case REAL:
      case REALTIME:
      case INPUT:
      case OUTPUT:
      case INOUT:
      case REG:
      case SIGNED:
      case IDENTIFIER:
        task_port_item(res);
        break;
      case TIME:
      case PARAMETER:
        block_item_declaration(res);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    stat = statement_or_null();
         res.setBody(stat); {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void task_port_list(VSubProgram sub) throws ParseException {
    task_port_item(sub);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      task_port_item(sub);
    }
  }

  final public void task_port_item(VSubProgram sub) throws ParseException {
 VType type; Direction dir = null; VOperRange range=null; boolean signed=false; IdentifierList list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case OUTPUT:
    case INOUT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
        jj_consume_token(INPUT);
                 dir=Direction.INPUT;
        break;
      case OUTPUT:
        jj_consume_token(OUTPUT);
                                                  dir=Direction.OUTPUT;
        break;
      case INOUT:
        jj_consume_token(INOUT);
                                                                                   dir=Direction.INOUT;
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TIME);
               type=VTypeTime.TYPE;
      break;
    case REAL:
      jj_consume_token(REAL);
                                              type=VTypeReal.TYPE;
      break;
    case REALTIME:
      jj_consume_token(REALTIME);
                                                                                 type=VTypeRealTime.TYPE;
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
                                                                                                                       type=VTypeInteger.TYPE;
      break;
    case LBRACKET:
    case REG:
    case SIGNED:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REG:
        jj_consume_token(REG);
        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNED:
        jj_consume_token(SIGNED);
                   signed=true;
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        range = range();
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
                          type=new VTypeVector(range,signed);
      list = identifier_list();
          createParams( sub, type, dir, list );
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public IdentifierList identifier_list() throws ParseException {
 IdentifierList res = new IdentifierList(); Token t;
    t = jj_consume_token(IDENTIFIER);
                          res.add(t);
    label_32:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_32;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                                           res.add(t);
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void block_item_declaration(VNamedElement owner) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
      parameter_declaration((IVParamHolder)owner);
      break;
    case REG:
      reg_declaration();
      break;
    case INTEGER:
    case REAL:
    case REALTIME:
    case TIME:
      scalar_var_declaration((IVarHolder)owner);
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void scalar_var_declaration(IVarHolder holder) throws ParseException {
 VType type; IdentifierList list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIME:
      jj_consume_token(TIME);
               type=VTypeTime.TYPE;
      break;
    case REAL:
      jj_consume_token(REAL);
                                              type=VTypeReal.TYPE;
      break;
    case REALTIME:
      jj_consume_token(REALTIME);
                                                                                 type=VTypeRealTime.TYPE;
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
                                                                                                                       type=VTypeInteger.TYPE;
      list = identifier_list();
         createVars(holder, type, list);
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void GateInstantiation() throws ParseException {
    jj_consume_token(GATETYPE);
    if (jj_2_24(2)) {
      drive_strength();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      delay2();
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name_of_gate_instance();
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    Arguments();
    jj_consume_token(SEMICOLON);
  }

  final public void name_of_gate_instance() throws ParseException {
    jj_consume_token(IDENTIFIER);
    range();
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case IDENTIFIER:
    case apostrophed_number:
    case 140:
    case 141:
    case 142:
    case 143:
      ArgumentList();
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgumentList() throws ParseException {
    expression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      expression();
    }
  }

/*
  unary_operator ::=
  + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
  binary_operator ::=
  + | - | * | / | % | == | != | === | !== | && | ||
  | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | <<
*/
  final public VOper variable_lvalue() throws ParseException {
 VOper res, l, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      res = hierarchical_identifier();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[114] = jj_gen;
          break label_34;
        }
                         r=null;
        jj_consume_token(LBRACKET);
        l = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          r = expression();
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
                                if( r == null ) {
                                        res = new VOperIndex( res, l );
                                } else {
                                        res = new VOperSlice( res, new VOperRange( l, r ) );
                                }
      }
      break;
    case LBRACE:
      res = variable_concatenation();
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper variable_concatenation() throws ParseException {
  ArrayList<VOper> ops = new ArrayList<VOper>(); VOper op;
    jj_consume_token(LBRACE);
    op = variable_concatenation_value();
                                                 ops.add(op);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA);
      op = variable_concatenation_value();
                                                                                                          ops.add(op);
    }
    jj_consume_token(RBRACE);
         {if (true) return new VOperConcat(ops);}
    throw new Error("Missing return statement in function");
  }

  final public VOper variable_concatenation_value() throws ParseException {
 VOper res;
    res = variable_lvalue();
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper expression() throws ParseException {
 VOper res; TextCoord c = begin();
    /*
      expression ::=
      primary
      | unary_operator primary
      | expression binary_operator expression
      | expression ? expression : expression
      | string
      */
      // basically fully reworked to avoid left recursion, cdh
      // see "You don't know Jack " article JavaWorld Dec 1996
      res = conditional_expression();
   res.setBegin(c); markEnd(res); {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper conditional_expression() throws ParseException {
 VOper cond, t, f;
    cond = bitwise_oper();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 145:
      jj_consume_token(145);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 138:
          ;
          break;
        default:
          jj_la1[118] = jj_gen;
          break label_36;
        }
        attribute_instance();
                                             {if (true) throw new RuntimeException();}
      }
      t = expression();
      jj_consume_token(COLON);
      f = expression();
                 cond = new VOperCond(cond, t, f);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
          {if (true) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public VOper bitwise_oper() throws ParseException {
  VBinaryKind op; VOper res, arg;
    res = equality();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case 142:
      case 143:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_37;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        jj_consume_token(BIT_AND);
                               op = VBinaryKind.BAND;
        break;
      case BIT_OR:
        jj_consume_token(BIT_OR);
                               op = VBinaryKind.BOR;
        break;
      case XOR:
        jj_consume_token(XOR);
                               op = VBinaryKind.BXOR;
        break;
      case 143:
        jj_consume_token(143);
                                op = VBinaryKind.BEQ;
        break;
      case 142:
        jj_consume_token(142);
                                op = VBinaryKind.BEQ;
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg = equality();
                 res = new VOperBinary(res, op, arg);
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper equality() throws ParseException {
  VBinaryKind op; VOper res, arg;
    res = compare();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_38;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                              op = VBinaryKind.EQ;
        break;
      case NE:
        jj_consume_token(NE);
                               op = VBinaryKind.NE;
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg = compare();
                  res = new VOperBinary(res, op, arg);
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper compare() throws ParseException {
  VBinaryKind op; VOper res, arg;
    res = shift();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                               op = VBinaryKind.LT;
        break;
      case LE:
        jj_consume_token(LE);
                               op = VBinaryKind.LE;
        break;
      case GT:
        jj_consume_token(GT);
                               op = VBinaryKind.GT;
        break;
      case GE:
        jj_consume_token(GE);
                               op = VBinaryKind.GE;
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg = shift();
                 res = new VOperBinary(res, op, arg);
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper shift() throws ParseException {
  VOper left, right; VBinaryKind op;
    left = sum();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case 146:
      case 147:
      case 148:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
                       op = VBinaryKind.LSL;
        break;
      case 146:
        jj_consume_token(146);
                        op = VBinaryKind.LSR;
        break;
      case 147:
        jj_consume_token(147);
                         op = VBinaryKind.ASL;
        break;
      case 148:
        jj_consume_token(148);
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          op = VBinaryKind.ASL;
      right = sum();
                 left = new VOperBinary(left, op, right);
    }
         {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public VOper sum() throws ParseException {
  VBinaryKind op; VOper res, arg;
    res = term();
    label_41:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_41;
      }
      op = addop();
      arg = term();
         res = new VOperBinary(res, op, arg);
    }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper term() throws ParseException {
 VBinaryKind op; VOper res, arg;
    res = unary();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
      case 144:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_42;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 144:
        jj_consume_token(144);
             op = VBinaryKind.MUL;
        break;
      case SLASH:
        jj_consume_token(SLASH);
                   op = VBinaryKind.DIV;
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg = unary();
         res = new VOperBinary(res, op, arg);
    }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper unary() throws ParseException {
  VOper res; VUnaryKind op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case 140:
    case 141:
    case 142:
    case 143:
      op = unary_operator();
      res = element();
                                                  res = new VOperUnary(op, res);
      break;
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case IDENTIFIER:
    case apostrophed_number:
      res = element();
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper element() throws ParseException {
 VOper res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LBRACE:
    case IDENTIFIER:
    case apostrophed_number:
      /*LOOKAHEAD(3)*/ res = primary();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      res = expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VBinaryKind addop() throws ParseException {
  VBinaryKind res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
          res = VBinaryKind.ADD;
      break;
    case MINUS:
      jj_consume_token(MINUS);
             res = VBinaryKind.SUB;
      break;
    case AND:
      jj_consume_token(AND);
           res = VBinaryKind.LAND;
      break;
    case OR:
      jj_consume_token(OR);
          res = VBinaryKind.LOR;
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper concatenation() throws ParseException {
  ArrayList<VOper> els = new ArrayList<VOper>(); VOper el1;
    jj_consume_token(LBRACE);
    el1 = replication();
                                     els.add(el1);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_43;
      }
      jj_consume_token(COMMA);
      el1 = replication();
                                           els.add(el1);
    }
    jj_consume_token(RBRACE);
         {if (true) return new VOperConcat(els);}
    throw new Error("Missing return statement in function");
  }

  final public VOper replication() throws ParseException {
  VOper el1, el2 = null;
    el1 = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      el2 = expression();
      jj_consume_token(RBRACE);
                 el1 = new VOperReplic(el1, el2);
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
         {if (true) return el1;}
    throw new Error("Missing return statement in function");
  }

  final public VOper primary() throws ParseException {
  VOper res = null, arg;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      res = index_expression();
      break;
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case apostrophed_number:
      res = number();
      break;
    case LBRACE:
      res = concatenation();
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         if( res == null ) {if (true) throw new RuntimeException();} {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper index_expression() throws ParseException {
  VOper res, arg, arg2;
    res = hierarchical_identifier();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_44;
      }
                 arg2 = null;
      jj_consume_token(LBRACKET);
      arg = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        arg2 = expression();
        break;
      default:
        jj_la1[137] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
                 if( arg2 == null) res = new VOperIndex(res, arg); else res = new VOperSlice( res, new VOperRange( arg, arg2) );
    }
         markAsTop(res); {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VOper hierarchical_identifier() throws ParseException {
  VOper res, arg; TextCoord b = begin();
    res = identifier();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_45;
      }
      jj_consume_token(DOT);
      arg = identifier();
                                        res = new VOperDot(res, arg);
    }
                res.setBegin(b);
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VName identifier() throws ParseException {
  Token t; VName res;
    t = jj_consume_token(IDENTIFIER);
         res = new VName(t.image); markBegin(res, t); /*res.setIsTop(true);*/ {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

/*
mintypmax_expression ::=
expression
| expression : expression : expression
*/
  final public void mintypmax_expression() throws ParseException {
    if (jj_2_26(3)) {
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED_NUMBER:
      case REAL_NUMBER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case IDENTIFIER:
      case apostrophed_number:
      case 140:
      case 141:
      case 142:
      case 143:
        expression();
        jj_consume_token(COLON);
        expression();
        jj_consume_token(COLON);
        expression();
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public VOper number() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMBER:
      t = jj_consume_token(UNSIGNED_NUMBER);
                           {if (true) return new VConst(VValue.integer(t.image));}
      break;
    case REAL_NUMBER:
      jj_consume_token(REAL_NUMBER);
      break;
    case apostrophed_number:
      t = jj_consume_token(apostrophed_number);
                              {if (true) return new VConst(VValue.vector(t.image));}
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
VOper concatenation() :
{ArrayList<VOper> args = new ArrayList<VOper>(); VOper arg;}
{
  <LBRACE> arg = expression() {args.add(arg);} ( <COMMA> arg = expression() {args.add(arg);})* <RBRACE>
  {return new VOperConcat(args);}
}
*/

/*
multiple_concatenation ::= { expression { expression { , expression } } }
*/
  final public VStatement seq_block() throws ParseException {
 VStatements res = new VStatements(); VStatement stat;
    jj_consume_token(BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[141] = jj_gen;
      ;
    }
    label_46:
    while (true) {
      if (jj_2_27(1)) {
        ;
      } else {
        break label_46;
      }
      stat = statement();
                                                                  res.add(stat);
    }
    jj_consume_token(END);
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VStatement statement() throws ParseException {
  VStatement stat; TextCoord c = begin();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
        ;
        break;
      default:
        jj_la1[142] = jj_gen;
        break label_47;
      }
      attribute_instance();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      stat = seq_block();
      break;
    default:
      jj_la1[143] = jj_gen;
      if (jj_2_28(2147483647)) {
        stat = case_statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SHARP:
        case REPEAT:
        case 149:
          stat = procedural_timing_control_statement();
          break;
        default:
          jj_la1[144] = jj_gen;
          if (isSubprogramName()) {
            stat = task_enable();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case IDENTIFIER:
              stat = assignment();
              break;
            case IF:
              stat = conditional_statement();
              break;
            case FORCE:
            case ASSIGN_KEY:
            case RELEASE:
            case DEASSIGN:
              stat = procedural_continuous_assignments();
              break;
            default:
              jj_la1[145] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
         stat.setBegin(c); {if (true) return stat;}
    throw new Error("Missing return statement in function");
  }

  final public VStatement statement_or_null() throws ParseException {
 VStatements res = new VStatements(); VStatement stat;
    if (jj_2_29(2147483647)) {
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 138:
          ;
          break;
        default:
          jj_la1[146] = jj_gen;
          break label_48;
        }
        attribute_instance();
      }
      jj_consume_token(SEMICOLON);
                                                                                {if (true) return res;}
    } else if (jj_2_30(1)) {
      stat = statement();
                               {if (true) return stat;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//blocking_assignment ::= variable_lvalue = [ delay_or_event_control ] expression
//nonblocking_assignment ::= variable_lvalue <= [ delay_or_event_control ] expression
  final public VStatement assignment() throws ParseException {
 VOper src, trg; VAssignKind kind; VDelayOrEventControl delay = null;
    trg = variable_lvalue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                                      kind=VAssignKind.EQ;
      break;
    case LE:
      jj_consume_token(LE);
                                                                  kind=VAssignKind.ARROW;
      break;
    default:
      jj_la1[147] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
    case REPEAT:
    case 149:
      delay = delay_or_event_control();
      break;
    default:
      jj_la1[148] = jj_gen;
      ;
    }
    src = expression();
    jj_consume_token(SEMICOLON);
                if( delay != null ) {
                        src = new VOperAfter( delay, src );
                }
                {if (true) return new VAssignStatement(trg, kind, src);}
    throw new Error("Missing return statement in function");
  }

  final public VStatement procedural_continuous_assignments() throws ParseException {
  VAssignKind kind; VOper l, r; VReleaseKind rkind;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORCE:
    case ASSIGN_KEY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN_KEY:
        jj_consume_token(ASSIGN_KEY);
                            kind=VAssignKind.ASSIGN;
        break;
      case FORCE:
        jj_consume_token(FORCE);
                                                                kind=VAssignKind.FORCE;
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      l = expression();
      jj_consume_token(ASSIGN);
      r = expression();
      jj_consume_token(SEMICOLON);
                  {if (true) return new VAssignStatement( l, kind, r );}
      break;
    case RELEASE:
    case DEASSIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELEASE:
        jj_consume_token(RELEASE);
                             rkind=VReleaseKind.RELEASE;
        break;
      case DEASSIGN:
        jj_consume_token(DEASSIGN);
                                                                       rkind=VReleaseKind.DEASSIGN;
        break;
      default:
        jj_la1[150] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      l = expression();
      jj_consume_token(SEMICOLON);
                  {if (true) return new VReleaseStatement(l, rkind);}
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
function_statement ::=
{ attribute_instance() } function_blocking_assignment ";"
| { attribute_instance() } function_case_statement
| { attribute_instance() } function_conditional_statement
| { attribute_instance() } function_loop_statement
| { attribute_instance() } function_seq_block
| { attribute_instance() } disable_statement
| { attribute_instance() } system_task_enable
*/
  final public VStatement case_statement() throws ParseException {
 ValueSet type = null; VOper expr; VCaseStatement res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      break;
    case CASEZ:
      jj_consume_token(CASEZ);
                            type=ValueSet.Z;
      break;
    case CASEX:
      jj_consume_token(CASEX);
                                                         type=ValueSet.X;
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    expr = expression();
    jj_consume_token(RPAREN);
         res = new VCaseStatement(type, expr);
    case_item(res);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED_NUMBER:
      case REAL_NUMBER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case DEFAULT1:
      case IDENTIFIER:
      case apostrophed_number:
      case 140:
      case 141:
      case 142:
      case 143:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_49;
      }
      case_item(res);
    }
    jj_consume_token(ENDCASE);
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void case_item(VCaseStatement stat) throws ParseException {
 VCaseElement el = new VCaseElement(); VOper expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT1:
      jj_consume_token(DEFAULT1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
      expr = statement_or_null();
                                                    el.add(expr);
      break;
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case IDENTIFIER:
    case apostrophed_number:
    case 140:
    case 141:
    case 142:
    case 143:
      expr = expression();
                             el.add(expr);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[155] = jj_gen;
          break label_50;
        }
        jj_consume_token(COMMA);
        expr = expression();
                                                                     el.add(expr);
      }
      jj_consume_token(COLON);
      expr = statement_or_null();
                                                                                                                       el.add(expr);
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         stat.add(el);
  }

  final public VStatement conditional_statement() throws ParseException {
 VOper expr; VStatement ifStat, elseStat = new VStatements();
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expr = expression();
    jj_consume_token(RPAREN);
    ifStat = statement_or_null();
    if (jj_2_31(2)) {
      jj_consume_token(ELSE);
      elseStat = statement_or_null();
    } else {
      ;
    }
         {if (true) return new VIfStatement(expr, ifStat, elseStat);}
    throw new Error("Missing return statement in function");
  }

  final public VStatement task_enable() throws ParseException {
  VOper expr;
    expr = call();
    jj_consume_token(SEMICOLON);
          {if (true) return new VExprStatement(expr);}
    throw new Error("Missing return statement in function");
  }

  final public VOperCall call() throws ParseException {
  VOper sub; VOper p; VOperCall call;
    sub = identifier();
         call = new VOperCall(sub);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      p = expression();
                                  call.addParam(p);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[157] = jj_gen;
          break label_51;
        }
        jj_consume_token(COMMA);
        p = expression();
                                       call.addParam(p);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
         {if (true) return call;}
    throw new Error("Missing return statement in function");
  }

  final public VOper delay_control() throws ParseException {
  VOper arg;
    jj_consume_token(SHARP);
    /*LOOKAHEAD(3)*/ arg = delay_value();
         {if (true) return new VOperDelay(arg);}
    throw new Error("Missing return statement in function");
  }

  final public VDelayOrEventControl delay_or_event_control() throws ParseException {
  VOper delay = null, event = null, expr = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      delay = delay_control();
      break;
    case 149:
      event = event_control();
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
      event = event_control();
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return new VDelayOrEventControl(delay, event, expr);}
    throw new Error("Missing return statement in function");
  }

/*
void disable_statement() :
{}
{
	"disable" ( hierarchical_task_identifier()
				| hierarchical_block_identifier() ) ";"
}
*/
  final public VOper event_control() throws ParseException {
 VOper res = null;
    jj_consume_token(149);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      res = identifier();
      break;
    case 144:
      jj_consume_token(144);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED_NUMBER:
      case REAL_NUMBER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case POSEDGE:
      case NEGEDGE:
      case IDENTIFIER:
      case apostrophed_number:
      case 140:
      case 141:
      case 142:
      case 143:
        res = event_expression();
        break;
      case 144:
        jj_consume_token(144);
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

//event_trigger ::=
//-> hierarchical_event_identifier ;
  final public VOper event_expression() throws ParseException {
 VOper res, arg; TextCoord c = begin();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMBER:
    case REAL_NUMBER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case IDENTIFIER:
    case apostrophed_number:
    case 140:
    case 141:
    case 142:
    case 143:
      res = expression();
      break;
    case POSEDGE:
      jj_consume_token(POSEDGE);
      res = expression();
                                                res=new VOperEdge(res, false); res.setBegin(c);
      break;
    case NEGEDGE:
      jj_consume_token(NEGEDGE);
      res = expression();
                                                res=new VOperEdge(res, true); res.setBegin(c);
      break;
    default:
      jj_la1[162] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_52:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_52;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case KEY_OR:
        jj_consume_token(KEY_OR);
        break;
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg = event_expression();
                                                           res=new VOperBinary(res, VBinaryKind.LOR, arg);
    }
         res.setBegin(c); {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public VStatement procedural_timing_control_statement() throws ParseException {
 VStatement res; VDelayOrEventControl delay;

    delay = delay_or_event_control();
    res = statement_or_null();
         res.setControl(delay); {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_3R_68() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(RELEASE)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(ASSIGN_KEY)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(SHARP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(123)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN_RIGHT_CARET)) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(123)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isSubprogramName();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    if (jj_3R_149()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_scan_token(STAR_RIGHT_CARET)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_135()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(OUTPUT_SYMBOL)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_83()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(apostrophed_number)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(UNSIGNED_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(TABLE)) return true;
    Token xsp;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDTABLE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(MEDIUM)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(138)) return true;
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(139)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SMALL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(143)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(142)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(141)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(140)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_205()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_136()) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(NEGEDGE)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(POSEDGE)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(144)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(SHARP)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(147)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(146)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(149)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(SHARP)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_66()) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) return true;
    }
    }
    }
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(HIGHZ0)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRENGTH1)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(HIGHZ1)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRENGTH0)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRENGTH0)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(HIGHZ1)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRENGTH1)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRENGTH0)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(REPEAT)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRENGTH0)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRENGTH1)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(SHARP)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(142)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(143)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(CASEX)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(DEASSIGN)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(145)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(FORCE)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(CASEZ)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public VerilogParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[164];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x60000000,0x0,0xe0000000,0x60000000,0x60000000,0x60000000,0x60000000,0x60000000,0x60000000,0x20000000,0x60000000,0x60000000,0x60000000,0x60000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x200,0x30,0x10000,0x0,0x0,0x2000,0x0,0x10000,0x30,0x0,0x0,0x0,0x80000,0x10000,0x0,0x10000,0x0,0x200,0x200,0x10000,0x200,0x0,0x0,0x0,0x200,0x200,0x10000,0x0,0x10000,0x10000,0x0,0x0,0x0,0x200,0x80000,0x10000,0x0,0x10000,0x2000,0x200,0x140,0x80000,0x10000,0x140,0x80000,0x1800b40,0x1800000,0x60000000,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x200,0x10000,0x80000,0x10000,0x2000,0x1840b40,0x1800b40,0x1840b40,0x1800b40,0x20,0x0,0x0,0x0,0x2000,0x10000,0x0,0x2000,0x2000,0x102000,0x102000,0x10000,0x100000,0x2000,0x0,0x0,0x2000,0x80000,0x0,0x10000,0x10000,0x200,0x0,0x200,0x2000,0x2000,0x10000,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x80000,0x0,0x1800b40,0x10000,0x2000,0x20000,0x800,0x10000,0x0,0x0,0x0,0x0,0x12000000,0x12000000,0xc600000,0xc600000,0x0,0x0,0x0,0x0,0x1800b40,0xb40,0x60000000,0x10000,0x800,0x940,0x2000,0x20000,0x40000,0x1800b40,0x140,0x20000,0x0,0x0,0x80000,0x800,0x0,0x4100000,0x80000,0x0,0x0,0x0,0x0,0x1800b40,0x20000,0x10000,0x1800b40,0x10000,0x200,0x80000,0x1800b40,0x200,0x1800b40,0x10000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x8000,0x8000,0x0,0xf20000,0x0,0x7800,0x0,0x0,0x7800,0x0,0xf00000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10080000,0x10080000,0x0,0x10000000,0x60000000,0x6,0x60000000,0x0,0x0,0x0,0x6,0x0,0x0,0x6,0x6,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x76,0x76,0xe,0xb00000,0xb00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x76,0x76,0x76,0x76,0xf00000,0x700000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf07800,0xf07800,0x0,0x700000,0x800000,0x0,0x0,0xf03800,0x807800,0x7800,0x0,0x0,0x76,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x70,0x0,0x0,0x0,0x0,0x100,0x100,0x8,0x8,0x76,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x76,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x76,0x0,0x0,0x76,0x0,0x0,0x0,0x60000076,0x0,0x60000076,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x8000,0x8000,0x0,0x9103002,0x0,0x0,0x40000,0x0,0x0,0x0,0x1103002,0x8000000,0x0,0x103000,0x0,0x0,0x3000,0x0,0x8000000,0x2000000,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x8000000,0x8000000,0x1103002,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x8000000,0x0,0x0,0xc00,0x8,0x0,0x9040000,0x9040000,0x0,0x0,0x0,0x40000,0x0,0x8040000,0x1000000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x10,0x4000,0xab80000,0x0,0x0,0x4000,0x180000,0xa00000,0xb80000,0x1c0,0x8020000,0x0,0x0,0x8020000,0x0,0x0,0x4000,0x8000000,0x8000000,0x8000000,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0xf200,0xf000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf200,0xf200,0xf200,0xf200,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf200,0x0,0x0,0x0,0x0,0x0,0x400,0x20000,0xc000,0xc000,0x0,0x0,0x0,0x0,0x1c0000,0x1c0000,0x10000,0x10000,0xf200,0x200,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0xf200,0x200,0x0,0x400,0x0,0x200000,0x0,0x400,0x0,0x200000,0x0,0x0,0x0,0x0,0xf200,0x0,0x0,0xf200,0x0,0x0,0x200000,0x1f200,0x10000,0xf200,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[32];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public VerilogParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VerilogParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VerilogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public VerilogParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new VerilogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VerilogParser(VerilogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VerilogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[150];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 164; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 150; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 32; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
