/* Generated By:JavaCC: Do not edit this line. VerilogParserTokenManager.java */
package com.prosoft.verilog.parser;
                                    // put a package name here if desired

import com.prosoft.verilog.ir.*;
import com.prosoft.common.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("all")
public class VerilogParserTokenManager implements VerilogParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 83;
         }
         if ((active0 & 0x140L) != 0L || (active1 & 0x8L) != 0L)
            return 2;
         if ((active1 & 0x100800000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 137;
         }
         if ((active1 & 0x40200000a0000L) != 0L)
         {
            jjmatchedKind = 123;
            return 202;
         }
         if ((active0 & 0x200000L) != 0L || (active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 123;
            return 268;
         }
         if ((active1 & 0x10100800000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 22;
         }
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x200004000L) != 0L)
         {
            jjmatchedKind = 123;
            return 246;
         }
         if ((active0 & 0x77e00L) != 0L)
            return 11;
         if ((active1 & 0x2002c001c508800L) != 0L)
         {
            jjmatchedKind = 123;
            return 69;
         }
         if ((active1 & 0x1c000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 28;
         }
         if ((active1 & 0x20400000803000L) != 0L)
         {
            jjmatchedKind = 123;
            return 97;
         }
         if ((active1 & 0x4cb002400050000L) != 0L)
         {
            jjmatchedKind = 123;
            return 269;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x77e00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 1;
            }
            return 18;
         }
         if ((active0 & 0x200000L) != 0L || (active1 & 0x200000010000000L) != 0L)
            return 69;
         if ((active1 & 0x8201d000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 269;
         }
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x57dfe2e0cfff800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 69;
         }
         return -1;
      case 2:
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x53cffde1c7af800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 69;
         }
         if ((active1 & 0x82000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 269;
         }
         if ((active1 & 0x41002000850000L) != 0L)
            return 69;
         if ((active0 & 0x77e00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 2;
            }
            return 18;
         }
         return -1;
      case 3:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 3;
            }
            return 269;
         }
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x1fdfe1c1c7f8800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 3;
            }
            return 69;
         }
         if ((active1 & 0x40001c200007000L) != 0L)
            return 69;
         if ((active0 & 0x77e00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 3;
            }
            return 18;
         }
         return -1;
      case 4:
         if ((active0 & 0x74e00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 4;
            }
            return 18;
         }
         if ((active0 & 0x3000L) != 0L)
            return 18;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x8079000500000L) != 0L)
            return 69;
         if ((active1 & 0x1f7f80c1c2fa800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return 69;
         }
         return -1;
      case 5:
         if ((active0 & 0x20a00L) != 0L)
            return 18;
         if ((active1 & 0x1458001c208000L) != 0L)
            return 69;
         if ((active0 & 0x56400L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
            return 18;
         }
         if ((active1 & 0x1e3a00c000f2800L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
            return 69;
         }
         return -1;
      case 6:
         if ((active1 & 0x181800c000d2000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 6;
            return 69;
         }
         if ((active0 & 0x2400L) != 0L)
            return 18;
         if ((active1 & 0x62200000020800L) != 0L)
            return 69;
         if ((active0 & 0x54000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
            return 18;
         }
         return -1;
      case 7:
         if ((active0 & 0x50000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
            return 18;
         }
         if ((active0 & 0x4000L) != 0L)
            return 18;
         if ((active1 & 0x80000400002000L) != 0L)
            return 69;
         if ((active1 & 0x1018008000d0000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
            return 69;
         }
         return -1;
      case 8:
         if ((active1 & 0x100800800090000L) != 0L)
            return 69;
         if ((active0 & 0x50000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 8;
            return 18;
         }
         if ((active1 & 0x1000000040000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 8;
            return 69;
         }
         return -1;
      case 9:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
            return 69;
         }
         if ((active0 & 0x10000L) != 0L)
            return 18;
         if ((active1 & 0x40000L) != 0L)
            return 69;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
            return 18;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000L) != 0L)
            return 18;
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 10;
            return 69;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 4);
      case 10:
         return jjStopAtPos(0, 2);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 35:
         return jjStopAtPos(0, 51);
      case 37:
         return jjStopAtPos(0, 71);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 40:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x800L);
      case 43:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 48);
      case 45:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 46:
         return jjStopAtPos(0, 50);
      case 47:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 49);
      case 59:
         return jjStopAtPos(0, 47);
      case 60:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x100L, 0x80000L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x400L, 0x0L);
      case 62:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x140000L);
      case 63:
         return jjStopAtPos(0, 145);
      case 64:
         return jjStopAtPos(0, 149);
      case 91:
         return jjStopAtPos(0, 45);
      case 93:
         return jjStopAtPos(0, 46);
      case 94:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 96:
         return jjMoveStringLiteralDfa1_0(0x77e00L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10100800000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x82000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x441002000050000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000400000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200200010500800L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000008000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x200000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100800000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20400000803000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40200000a0000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x200004000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 43);
      case 124:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 44);
      case 126:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      case 41:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 43:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 45:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 61:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 62:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 94:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x10005c200000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800L, active1, 0xa2481000803000L, active2, 0L);
      case 102:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4600L, active1, 0x400000c004000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x41202000550800L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000008000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa0000L, active2, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 69);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0xc00200000L, active2, 0L);
      case 124:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 126:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(2, 147);
         break;
      case 62:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(2, 148);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80020000003000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x41080000058000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0xa0000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x600L, active1, 0x2000000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400100c000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0xa00000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000L, active1, 0x20000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x24800L, active1, 0x410000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000100000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x108040000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x41001c200000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800200800L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x102100000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x480004000a0000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20a00L, active1, 0L);
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 69);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20418000000800L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10081000000000L);
      case 107:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 69);
         break;
      case 108:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10040000L, active1, 0x20000002000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x800000010000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x810000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000200000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L, active1, 0x80000000040000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x508000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60400000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 69);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 69);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x32200L, active1, 0x4000000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0xa00000020000L);
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x44000L, active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000800000000L);
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc0000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 69);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400002000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2080000200000L);
      case 120:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 69);
         break;
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L);
      case 122:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 69);
         break;
      case 49:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 69);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200800080000L);
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0x10000L);
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 69);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0x100000000040800L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 18);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 18);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x81000400002000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L);
      case 109:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 69);
         break;
      case 110:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 69);
         break;
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x60000000000000L);
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 69);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 69);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 69);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 18);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 18);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L);
      case 108:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 69);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000002000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 69);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 116:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 69);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000800000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0x80000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 18);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 69);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000800040000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L);
      case 110:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 69);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 69);
         break;
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 99, 69);
         break;
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 69);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 69);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 109:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 69);
         break;
      case 114:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 120, 69);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 16, 18);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 82, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 18, 18);
         break;
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 112, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 268;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 137:
               case 69:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 202:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(18);
                  break;
               case 246:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 269:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  break;
               case 83:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 130)
                        kind = 130;
                     jjCheckNAdd(243);
                  }
                  else if (curChar == 39)
                     jjAddStates(0, 1);
                  else if (curChar == 36)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(2, 7);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(237);
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAdd(241);
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(239);
                  }
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  break;
               case 268:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 97:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 19)
                     kind = 19;
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0xfffffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 68:
                  if (curChar != 36)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 71:
                  if ((0xfffffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 72:
                  if (curChar == 39)
                     jjAddStates(0, 1);
                  break;
               case 84:
                  if (curChar == 48 && kind > 36)
                     kind = 36;
                  break;
               case 89:
                  if (curChar == 49 && kind > 36)
                     kind = 36;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(2, 7);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(121);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(122, 123);
                  break;
               case 123:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(125);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(126);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 128:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 130:
                  if ((0x83ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 145:
                  if (curChar == 48 && kind > 88)
                     kind = 88;
                  break;
               case 149:
                  if (curChar == 49 && kind > 89)
                     kind = 89;
                  break;
               case 197:
                  if (curChar == 48 && kind > 37)
                     kind = 37;
                  break;
               case 203:
                  if (curChar == 49 && kind > 37)
                     kind = 37;
                  break;
               case 236:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(237);
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(237);
                  break;
               case 238:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(239);
                  break;
               case 239:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(239);
                  break;
               case 240:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(241);
                  break;
               case 241:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(241);
                  break;
               case 242:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(243);
                  break;
               case 243:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(243);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 137:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 151;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 147;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 141;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 202:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 234;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 227;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 222;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 217;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 212;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 207;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(18);
                  }
                  else if (curChar == 92)
                     jjCheckNAdd(20);
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 246:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 266;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 263;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 259;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 257;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 255;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 250;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 269:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x500007e8000007eL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x500007e8000007eL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x500007e8000007eL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  else if (curChar == 110)
                     jjCheckNAdd(21);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  else if (curChar == 92)
                     jjCheckNAdd(71);
                  else if (curChar == 96)
                     jjAddStates(10, 11);
                  if ((0x500007e0000007eL & l) != 0L)
                  {
                     if (kind > 130)
                        kind = 130;
                     jjCheckNAdd(243);
                  }
                  else if (curChar == 116)
                     jjAddStates(12, 18);
                  else if (curChar == 115)
                     jjAddStates(19, 25);
                  else if (curChar == 110)
                     jjAddStates(26, 32);
                  else if (curChar == 119)
                     jjAddStates(33, 37);
                  else if (curChar == 112)
                     jjAddStates(38, 43);
                  else if (curChar == 114)
                     jjAddStates(44, 49);
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 111)
                     jjCheckNAdd(24);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if ((0x500000000000000L & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAdd(241);
                  }
                  else if (curChar == 98)
                     jjAddStates(50, 52);
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if ((0x500000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(239);
                  }
                  if (curChar == 120)
                     jjAddStates(53, 54);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if ((0x500007e8000007eL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(243);
                  }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 268:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  break;
               case 97:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(69);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 118;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 102;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 96;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  jjAddStates(55, 56);
                  break;
               case 16:
                  if (curChar == 96)
                     jjAddStates(10, 11);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 100 && kind > 36)
                     kind = 36;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 114 && kind > 36)
                     kind = 36;
                  break;
               case 25:
               case 78:
               case 79:
               case 177:
                  if (curChar == 111)
                     jjCheckNAdd(24);
                  break;
               case 26:
                  if (curChar == 115 && kind > 36)
                     kind = 36;
                  break;
               case 27:
               case 95:
               case 98:
               case 101:
               case 143:
               case 188:
                  if (curChar == 111)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 69 && kind > 93)
                     kind = 93;
                  break;
               case 31:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 69 && kind > 94)
                     kind = 94;
                  break;
               case 38:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 100 && kind > 95)
                     kind = 95;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 68 && kind > 95)
                     kind = 95;
                  break;
               case 53:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 68 && kind > 96)
                     kind = 96;
                  break;
               case 61:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if (curChar == 92)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(71);
                  break;
               case 73:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if (curChar == 104 && kind > 136)
                     kind = 136;
                  break;
               case 75:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 72 && kind > 136)
                     kind = 136;
                  break;
               case 77:
                  if (curChar == 120)
                     jjAddStates(53, 54);
                  break;
               case 80:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 98)
                     jjAddStates(50, 52);
                  break;
               case 82:
                  if (curChar == 102 && kind > 36)
                     kind = 36;
                  break;
               case 85:
               case 108:
               case 180:
               case 247:
                  if (curChar == 102)
                     jjCheckNAdd(84);
                  break;
               case 86:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 90:
               case 114:
               case 184:
               case 252:
                  if (curChar == 102)
                     jjCheckNAdd(89);
                  break;
               case 91:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 114)
                     jjAddStates(44, 49);
                  break;
               case 96:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 99:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 110 && kind > 36)
                     kind = 36;
                  break;
               case 105:
               case 245:
                  if (curChar == 97)
                     jjCheckNAdd(104);
                  break;
               case 106:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 121:
                  if (curChar != 95)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 122:
                  if (curChar == 95)
                     jjAddStates(57, 58);
                  break;
               case 125:
                  if (curChar != 95)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if (curChar != 95)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 127:
                  if ((0x7e8000007eL & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 129:
                  if ((0x811400008114L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(130);
                  break;
               case 130:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(130);
                  break;
               case 131:
                  if (curChar == 112)
                     jjAddStates(38, 43);
                  break;
               case 132:
                  if (curChar == 119)
                     jjCheckNAdd(104);
                  break;
               case 133:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 138:
                  if (curChar == 112 && kind > 36)
                     kind = 36;
                  break;
               case 139:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 144:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 146:
                  if (curChar == 108)
                     jjCheckNAdd(145);
                  break;
               case 147:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 150:
                  if (curChar == 108)
                     jjCheckNAdd(149);
                  break;
               case 151:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 101 && kind > 93)
                     kind = 93;
                  break;
               case 154:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 119)
                     jjAddStates(33, 37);
                  break;
               case 160:
                  if (curChar == 101 && kind > 37)
                     kind = 37;
                  break;
               case 161:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 100 && kind > 37)
                     kind = 37;
                  break;
               case 164:
               case 261:
                  if (curChar == 110)
                     jjCheckNAdd(163);
                  break;
               case 165:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 114 && kind > 37)
                     kind = 37;
                  break;
               case 167:
               case 265:
                  if (curChar == 111)
                     jjCheckNAdd(166);
                  break;
               case 168:
                  if (curChar == 107)
                     jjCheckNAdd(145);
                  break;
               case 169:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 107)
                     jjCheckNAdd(149);
                  break;
               case 172:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 110)
                     jjAddStates(26, 32);
                  break;
               case 175:
                  if (curChar == 110)
                     jjCheckNAdd(21);
                  break;
               case 176:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 178:
                  if (curChar == 116 && kind > 36)
                     kind = 36;
                  break;
               case 179:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 181:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 185:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 101 && kind > 94)
                     kind = 94;
                  break;
               case 191:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 115)
                     jjAddStates(19, 25);
                  break;
               case 198:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 204:
                  if (curChar == 121)
                     jjCheckNAdd(203);
                  break;
               case 205:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 121)
                     jjCheckNAdd(145);
                  break;
               case 210:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 103)
                     jjCheckNAdd(145);
                  break;
               case 215:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 121)
                     jjCheckNAdd(149);
                  break;
               case 220:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 103)
                     jjCheckNAdd(149);
                  break;
               case 225:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 100 && kind > 96)
                     kind = 96;
                  break;
               case 230:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 237:
                  if (curChar != 95)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 238:
                  if ((0x500000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(239);
                  break;
               case 239:
                  if ((0x500000080000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(239);
                  break;
               case 240:
                  if ((0x500000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(241);
                  break;
               case 241:
                  if ((0x500000080000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(241);
                  break;
               case 242:
                  if ((0x500007e0000007eL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(243);
                  break;
               case 243:
                  if ((0x500007e8000007eL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(243);
                  break;
               case 244:
                  if (curChar == 116)
                     jjAddStates(12, 18);
                  break;
               case 248:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 253:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 105 && kind > 37)
                     kind = 37;
                  break;
               case 258:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 105)
                     jjCheckNAdd(203);
                  break;
               case 260:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 262:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 266:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 9);
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(55, 56);
                  break;
               case 20:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 71:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 268 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(1, 0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 47)
                     kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 2:
                  if (curChar == 102)
                     kind = 26;
                  break;
               case 3:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 24)
                     kind = 24;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 23)
                     kind = 23;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_6(0x8000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_6(active0, 0x8000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_6(active0, 0x8000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa4_6(active0, 0x8000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa5_6(active0, 0x8000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_6(active0, 0x8000000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_6(active0, 0x8000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa8_6(active0, 0x8000000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa9_6(active0, 0x8000000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(9, 27);
         break;
      default :
         return 10;
   }
   return 10;
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x2000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 51);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 44:
         return jjStopAtPos(0, 48);
      case 45:
         return jjStopAtPos(0, 34);
      case 46:
         return jjStopAtPos(0, 50);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x400000L);
      case 58:
         return jjStopAtPos(0, 49);
      case 59:
         return jjStopAtPos(0, 47);
      case 91:
         return jjStopAtPos(0, 45);
      case 93:
         return jjStopAtPos(0, 46);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      case 123:
         return jjStopAtPos(0, 43);
      case 125:
         return jjStopAtPos(0, 44);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8003000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x8000040000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 1:
                  if ((0x8000040000000000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 2:
                  if (curChar == 42 && kind > 31)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x5404000054040L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if ((0x400000004L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if ((0x100000001000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 1:
                  if ((0x400000004L & l) != 0L)
                     kind = 30;
                  break;
               case 2:
                  if ((0x5404000054040L & l) != 0L)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   73, 75, 121, 122, 123, 126, 127, 128, 5, 6, 17, 19, 246, 251, 256, 258, 
   260, 264, 267, 202, 208, 213, 218, 223, 228, 235, 176, 177, 179, 183, 187, 189, 
   195, 162, 165, 167, 170, 173, 137, 142, 144, 148, 152, 158, 97, 100, 103, 107, 
   113, 119, 83, 88, 93, 78, 80, 14, 15, 122, 123, 127, 128, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\140\151\146\144\145\146", "\140\151\146\156\144\145\146", "\140\145\156\144\151\146", 
"\140\145\154\163\145", "\140\145\154\163\145\151\146", "\140\151\156\143\154\165\144\145", null, 
"\140\164\151\155\145\163\143\141\154\145", "\140\165\156\144\145\146", "\140\143\145\154\154\144\145\146\151\156\145", 
null, null, "\157\162", null, null, null, null, null, null, "\164\141\142\154\145", 
null, null, null, "\145\156\144\164\141\142\154\145", null, "\55", null, null, null, 
null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\72", 
"\56", "\43", "\75", "\76", "\74", "\41", "\176", "\75\75", "\74\75", "\76\75", 
"\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\52\76", "\75\76", "\151\156\164\145\147\145\162", 
"\162\145\141\154", "\162\145\141\154\164\151\155\145", "\164\151\155\145", 
"\155\157\144\165\154\145", "\145\156\144\155\157\144\165\154\145", "\163\160\145\143\151\146\171", 
"\145\156\144\163\160\145\143\151\146\171", "\163\160\145\143\160\141\162\141\155", "\151\156\160\165\164", 
"\157\165\164\160\165\164", "\151\156\157\165\164", "\162\145\147", null, null, "\150\151\147\150\172\60", 
"\150\151\147\150\172\61", "\151\146\156\157\156\145", null, null, null, null, "\164\141\163\153", 
"\146\165\156\143\164\151\157\156", "\141\165\164\157\155\141\164\151\143", "\142\145\147\151\156", 
"\145\156\144", "\143\141\163\145", "\143\141\163\145\170", "\143\141\163\145\172", 
"\163\155\141\154\154", "\154\141\162\147\145", "\155\145\144\151\165\155", 
"\141\154\167\141\171\163", "\151\156\151\164\151\141\154", "\162\145\160\145\141\164", 
"\160\162\151\155\151\164\151\166\145", "\145\156\144\160\162\151\155\151\164\151\166\145", 
"\144\145\146\141\165\154\164", "\163\151\147\156\145\144", "\146\157\162\143\145", 
"\141\163\163\151\147\156", "\162\145\154\145\141\163\145", "\145\156\144\143\141\163\145", 
"\144\145\141\163\163\151\147\156", "\160\141\162\141\155\145\164\145\162", "\151\146", "\145\154\163\145", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\50\52", "\52\51", "\176\46", "\176\174", "\176\136", "\136\176", "\52", "\77", 
"\76\76", "\74\74\74", "\76\76\76", "\100", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_TABLE_BLOCK",
   "IN_ONE_LINE_COMMENT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_SPECIFY_BLOCK",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1, 0, 
   0, 0, 0, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffff75f03ffe01L, 0xcfffffffffffffffL, 0x3fffffL, 
};
static final long[] jjtoSkip = {
   0xf80003eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xf80003eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8004001c0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[268];
private final int[] jjstateSet = new int[536];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public VerilogParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public VerilogParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 268; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 35)
         {
            jjmatchedKind = 35;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 35)
         {
            jjmatchedKind = 35;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 35)
         {
            jjmatchedKind = 35;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 35)
         {
            jjmatchedKind = 35;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 35)
         {
            jjmatchedKind = 35;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
