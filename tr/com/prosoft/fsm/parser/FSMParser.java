/* Generated By:JavaCC: Do not edit this line. FSMParser.java */
package com.prosoft.fsm.parser;

//import com.prosoft.vhdl.ir.*;
import com.prosoft.fsm.*;
import com.prosoft.common.name.*;
import java.util.*;

@SuppressWarnings("all")
public class FSMParser implements FSMParserConstants //extends ParserBase
{

  final public String identifier() throws ParseException {
    jj_consume_token(basic_identifier);
         {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public Name name() throws ParseException {
 Name res; String part;
    part = identifier();
                             res = new Name(new String[]{part});
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 163:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(163);
      part = identifier();
                                                                                             res = res.append(part);
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public State state(StateHolder parent) throws ParseException {
 State res; String name; State child; Transition trans; Action action; Name otherParent;
    name = identifier();
         res = new State(parent, name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      jj_consume_token(IN);
      otherParent = name();
                                     res.addOtherParent(otherParent);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 164:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(164);
        otherParent = name();
                                      res.addOtherParent(otherParent);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(OPENBRACKET);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACTION:
      case basic_identifier:
      case 165:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
        child = state(res);
                                    res.add(child);
        break;
      case 165:
        trans = transition(res);
                                           res.add(trans);
        break;
      case ACTION:
        action = action(res);
                                        res.add(action);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLOSEDBRACKET);
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Transition transition(State state) throws ParseException {
  Name name; Oper cond; Statement stat;
    jj_consume_token(165);
    name = name();
    cond = expression_in_braces();
    stat = statement_block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
         {if (true) return new Transition(state, name, cond, stat);}
    throw new Error("Missing return statement in function");
  }

  final public Oper expression_in_braces() throws ParseException {
  ArrayList<Token> res = new ArrayList<Token>(); int count = 1;
    jj_consume_token(OPENBRACE);
                while( count > 0 )
                {
                        Token t = getNextToken();
                        {res.add(t);}
                        if( t.kind == OPENBRACE ) count++;
                        else if( t.kind == CLOSEDBRACE ) count--;
//			s( t.kind );
                }
                res.remove(res.size()-1);
                {if (true) return new Oper(res.toArray(new Token[res.size()]));}
    throw new Error("Missing return statement in function");
  }

  final public Statement statement_block() throws ParseException {
  ArrayList<Token> res = new ArrayList<Token>(); int count = 1;
    jj_consume_token(OPENBRACKET);
                while( count > 0 )
                {
                        Token t = getNextToken();
                        {res.add(t);}
                        if( t.kind == OPENBRACKET ) count++;
                        else if( t.kind == CLOSEDBRACKET ) count--;
//			jj_consume_token( t.kind );
                }
                res.remove(res.size()-1);
                {if (true) return new Statement(res.toArray(new Token[res.size()]));}
    throw new Error("Missing return statement in function");
  }

  final public FSM fsm() throws ParseException {
  FSM fsm = new FSM("test"); State stat;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      stat = state(fsm);
                             fsm.add(stat);
    }
         {if (true) return fsm;}
    throw new Error("Missing return statement in function");
  }

  final public Action action(State state) throws ParseException {
  ActionKind kind = ActionKind.CORE; Statement stat;
    jj_consume_token(ACTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case OUT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
                         kind = ActionKind.IN;
        break;
      case OUT:
        jj_consume_token(OUT);
                                                         kind = ActionKind.OUT;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    stat = statement_block();
          {if (true) return new Action(state, kind, stat);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public FSMParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x1000,0x1000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x80,0x80,0x20000000,0x80,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x8,0x10,0x0,0x20,0x20,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public FSMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FSMParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FSMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FSMParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new FSMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FSMParser(FSMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FSMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[166];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 166; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        /*
	protected boolean isFunctionCall() {
		Token t;
		return (t=getToken(1)).kind == basic_identifier && getToken(2).kind == OPENBRACE
    	&& resolve(t.image, false) instanceof IRSubProgram;
	}
	*/
 /*
  static ErrorHandler errs = new ErrorHandler();
  
  public ConstantPool constantPool;
  
  public Enums enums;
  public String[] sourceLines;
  public IdentifiableList idents;

  public Node rootNode() {
  	return jjtree.rootNode();
  }
  */
}
