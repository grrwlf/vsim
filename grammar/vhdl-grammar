# This grammar was extracted from IEEE Standard VHDL Language
# Reference Manual IEEE Std 1076-2008 (Revision of IEEE Std 1076-2002)
#
# Sergey Mironov

absolute_pathname ::= . partial_pathname

abstract_literal ::= decimal_literal | based_literal

access_type_definition ::= ACCESS subtype_indication

actual_designator ::=
      [ INERTIAL ] expression
    | signal_name
    | variable_name
    | file_name
    | subtype_indication
    | subprogram_name
    | instantiated_package_name
    | OPEN

actual_parameter_part ::= parameter_association_list

actual_part ::=
       actual_designator
    | function_name ( actual_designator )
    | type_mark ( actual_designator )

adding_operator ::= + | â€“ | &

aggregate ::= ( element_association { , element_association } )

alias_declaration ::= ALIAS alias_designator [ : subtype_indication ] IS name [ signature ] ; 

alias_designator ::= identifier | character_literal | operator_symbol 

allocator ::= NEW subtype_indication | NEW qualified_expression 

architecture_body ::= ARCHITECTURE identifier OF entity_name IS architecture_declarative_part
                      BEGIN architecture_statement_part END [ ARCHITECTURE ] [ architecture_simple_name ] ;

architecture_declarative_part ::= { block_declarative_item } 

architecture_statement_part ::= { concurrent_statement } 

array_constraint ::= index_constraint [ array_element_constraint ] | ( OPEN ) [ array_element_constraint ] 

array_element_constraint ::= element_constraint 

array_element_resolution ::= resolution_indication

array_type_definition ::= unbounded_array_definition | constrained_array_definition

assertion ::= ASSERT condition [ REPORT expression ] [ SEVERITY expression ] 

assertion_statement ::= [ label : ] assertion ; 

association_element ::= [ formal_part => ] actual_part 

association_list ::= association_element { , association_element } 

attribute_declaration ::= ATTRIBUTE identifier : type_mark ; 

attribute_designator ::= attribute_simple_name 

attribute_name ::= prefix [ signature ] ' attribute_designator [ ( expression ) ] 

attribute_specification ::= ATTRIBUTE attribute_designator OF entity_specification IS expression ; 

base ::= integer

base_specifier ::= B | O | X | UB | UO | UX | SB | SO | SX | D


based_integer ::= extended_digit { [ _ ] extended_digit } 

based_literal ::= base # based_integer [ . based_integer ] # [ exponent ] 

basic_character ::= basic_graphic_character | format_effector

basic_graphic_character ::= upper_case_letter | digit | special_character| space_character

basic_identifier ::= letter { [ _ ] letter_or_digit } 

binding_indication ::= [ USE entity_aspect ] [ generic_map_aspect ] [ port_map_aspect ] 

bit_string_literal ::= [ integer ] base_specifier " [ bit_value ] " 

bit_value ::= graphic_character { [ _ ] graphic_character } 

block_configuration ::= FOR block_specification { use_clause } { configuration_item } END FOR ; 

block_declarative_item ::=
      subprogram_declaration 
    | subprogram_body 
    | subprogram_instantiation_declaration 
    | package_declaration 
    | package_body 
    | package_instantiation_declaration 
    | type_declaration 
    | subtype_declaration 
    | constant_declaration 
    | signal_declaration 
    | shared_variable_declaration 
    | file_declaration 
    | alias_declaration 
    | component_declaration 
    | attribute_declaration 
    | attribute_specification 
    | configuration_specification 
    | disconnection_specification 
    | use_clause 
    | group_template_declaration 
    | group_declaration 
    | PSL_Property_Declaration 
    | PSL_Sequence_Declaration 
    | PSL_Clock_Declaration 

block_declarative_part ::= 
    { block_declarative_item } 

block_header ::= [ generic_clause [ generic_map_aspect ; ] ] [ port_clause [ port_map_aspect ; ] ]

block_specification ::= architecture_name | block_statement_label | generate_statement_label [ ( generate_specification ) ] 

block_statement ::= block_label : BLOCK [ ( guard_condition ) ] [ IS ] block_header block_declarative_part
    BEGIN block_statement_part END BLOCK [ block_label ] ; 

block_statement_part ::= { concurrent_statement } 

case_generate_alternative ::= WHEN [ alternative_label : ] choices => generate_statement_body 

case_generate_statement ::= generate_label : CASE expression GENERATE case_generate_alternative { case_generate_alternative } END GENERATE [ generate_label ] ; 

case_statement ::= [ case_label : ] CASE [ ? ] expression IS case_statement_alternative { case_statement_alternative } END CASE [ ? ] [ case_label ] ; 

case_statement_alternative ::= WHEN choices => sequence_of_statements 

character_literal ::= ' graphic_character ' 

choice ::= 
    simple_expression 
    | discrete_range 
    | element_simple_name 
    | OTHERS 

choices ::= choice { | choice } 

component_configuration ::= FOR component_specification [ binding_indication ; ] { verification_unit_binding_indication ; } [ block_configuration ] END FOR ;

component_declaration ::= COMPONENT identifier [ IS ] [ local_generic_clause ] [ local_port_clause ] END COMPONENT [ component_simple_name ] ;

component_instantiation_statement ::= instantiation_label : instantiated_unit [ generic_map_aspect ] [ port_map_aspect ] ; 

component_specification ::= instantiation_list : component_name 
composite_type_definition ::= array_type_definition | record_type_definition 

compound_configuration_specification ::=
    FOR component_specification binding_indication ; 
        verification_unit_binding_indication ; 
        { verification_unit_binding_indication ; } 
    END FOR ; 

concurrent_assertion_statement ::= [ label : ] [ POSTPONED ] assertion ; 

concurrent_conditional_signal_assignment ::= target <= [ GUARDED ] [ delay_mechanism ] conditional_waveforms ; 

concurrent_procedure_call_statement ::= [ label : ] [ POSTPONED ] procedure_call ; 

concurrent_selected_signal_assignment ::= WITH expression SELECT [ ? ] target <= [ GUARDED ] [ delay_mechanism ] selected_waveforms ; 

concurrent_signal_assignment_statement ::= 
      [ label : ] [ POSTPONED ] concurrent_simple_signal_assignment 
    | [ label : ] [ POSTPONED ] concurrent_conditional_signal_assignment 
    | [ label : ] [ POSTPONED ] concurrent_selected_signal_assignment 

concurrent_simple_signal_assignment ::= target <= [ GUARDED ] [ delay_mechanism ] waveform ; 

concurrent_statement ::= 
    block_statement 
    | process_statement 
    | concurrent_procedure_call_statement
    | concurrent_assertion_statement
    | concurrent_signal_assignment_statement
    | component_instantiation_statement
    | generate_statement
    | PSL_PSL_Directive

condition ::= expression 

condition_clause ::= UNTIL condition 

condition_operator ::= ??

conditional_expressions ::= expression WHEN condition { ELSE expression WHEN condition } [ ELSE expression ] 

conditional_force_assignment ::= target <= FORCE [ force_mode ] conditional_expressions ; 

conditional_signal_assignment ::= conditional_waveform_assignment | conditional_force_assignment 

conditional_variable_assignment ::= target := conditional_expressions ; 

conditional_waveform_assignment ::= target <= [ delay_mechanism ] conditional_waveforms ; 

conditional_waveforms ::= waveform WHEN condition { ELSE waveform WHEN condition } [ ELSE waveform ] 

configuration_declaration ::= CONFIGURATION identifier OF entity_name IS
                                configuration_declarative_part { verification_unit_binding_indication ; } block_configuration
                              END [ CONFIGURATION ] [ configuration_simple_name ] ; 

configuration_declarative_item ::= use_clause | attribute_specification | group_declaration 

configuration_declarative_part ::= { configuration_declarative_item } 
configuration_item ::= block_configuration | component_configuration 

configuration_specification ::= simple_configuration_specification | compound_configuration_specification

constant_declaration ::= CONSTANT identifier_list : subtype_indication [ := expression ] ; 

constrained_array_definition ::= ARRAY index_constraint OF element_subtype_indication 
constraint ::= range_constraint | array_constraint | record_constraint

context_clause ::= { context_item } 

context_declaration ::= CONTEXT identifier IS context_clause END [ CONTEXT ] [ context_simple_name ] ; 

context_item ::= library_clause | use_clause | context_reference 

context_reference ::= CONTEXT selected_name { , selected_name } ; 

decimal_literal ::= integer [ . integer ] [ exponent ]

delay_mechanism ::= TRANSPORT | [ REJECT time_expression ] INERTIAL

design_file ::= design_unit { design_unit } 

design_unit ::= context_clause library_unit 

designator ::= identifier | operator_symbol 

direction ::= TO | DOWNTO 

disconnection_specification ::= DISCONNECT guarded_signal_specification AFTER time_expression ;

discrete_range ::= discrete_subtype_indication | range 

element_association ::= [ choices => ] expression 

element_constraint ::= array_constraint | record_constraint

element_declaration ::= identifier_list : element_subtype_definition ;

element_resolution ::= array_element_resolution | record_resolution

element_subtype_definition ::= subtype_indication

entity_aspect ::= ENTITY entity_name [ ( architecture_identifier ) ] | CONFIGURATION configuration_name | OPEN

entity_class ::=
      ENTITY | ARCHITECTURE | CONFIGURATION | PROCEDURE | FUNCTION | PACKAGE | TYPE | SUBTYPE | CONSTANT
    | SIGNAL | VARIABLE | COMPONENT | LABEL | LITERAL | UNITS | GROUP | FILE | PROPERTY | SEQUENCE 

entity_class_entry ::= entity_class [ <> ] 

entity_class_entry_list ::= entity_class_entry { , entity_class_entry } 

entity_declaration ::= ENTITY identifier IS entity_header entity_declarative_part [ BEGIN entity_statement_part ] END [ ENTITY ] [ entity_simple_name ] ; 

entity_declarative_item ::=
      subprogram_declaration | subprogram_body | subprogram_instantiation_declaration
    | package_declaration | package_body | package_instantiation_declaration | type_declaration | subtype_declaration
    | constant_declaration | signal_declaration | shared_variable_declaration | file_declaration
    | alias_declaration | attribute_declaration | attribute_specification | disconnection_specification
    | use_clause | group_template_declaration | group_declaration
    | PSL_Property_Declaration | PSL_Sequence_Declaration | PSL_Clock_Declaration

entity_declarative_part ::= { entity_declarative_item }

entity_designator ::= entity_tag [ signature ]

entity_header ::= [ formal_generic_clause ] [ formal_port_clause ]

entity_name_list ::= entity_designator { , entity_designator } | OTHERS | ALL 

entity_specification ::= entity_name_list : entity_class 

entity_statement ::= concurrent_assertion_statement | passive_concurrent_procedure_call_statement | passive_process_statement | PSL_PSL_Directive 

entity_statement_part ::= { entity_statement } 

entity_tag ::= simple_name | character_literal | operator_symbol

enumeration_literal ::= identifier | character_literal 
enumeration_type_definition ::= ( enumeration_literal { , enumeration_literal } ) 
exit_statement ::= [ label : ] EXIT [ loop_label ] [ WHEN condition ] ; 

exponent ::= E [ + ] integer | E â€“ integer

expression ::= condition_operator primary | logical_expression

extended_digit ::= digit | letter 

extended_identifier ::= \ graphic_character { graphic_character } \ 

external_name ::= external_constant_name | external_signal_name | external_variable_name 

external_constant_name ::= << CONSTANT external_pathname : subtype_indication >> 

external_signal_name ::= << SIGNAL external_pathname : subtype_indication >> 

external_variable_name ::= << VARIABLE external_pathname : subtype_indication >> 

external_pathname ::= package_pathname | absolute_pathname | relative_pathname 

factor ::= primary [ ** primary ] | ABS primary | NOT primary | logical_operator primary 

file_declaration ::= FILE identifier_list : subtype_indication [ file_open_information ] ; 

file_logical_name ::= string_expression 

file_open_information ::= [ OPEN file_open_kind_expression ] IS file_logical_name 

file_type_definition ::= FILE OF type_mark

floating_type_definition ::= range_constraint

for_generate_statement ::= generate_label : FOR generate_parameter_specification GENERATE generate_statement_body END GENERATE [ generate_label ] ;

force_mode ::= IN | OUT 

formal_designator ::= generic_name | port_name | parameter_name 

formal_parameter_list ::= parameter_interface_list 

formal_part ::= formal_designator | function_name ( formal_designator ) | type_mark ( formal_designator ) 

full_type_declaration ::= TYPE identifier IS type_definition ;

function_call ::= function_name [ ( actual_parameter_part ) ] 

function_specification ::= [ PURE | IMPURE ] FUNCTION designator subprogram_header [ [ PARAMETER ] ( formal_parameter_list ) ] RETURN type_mark 

generate_specification ::= static_discrete_range | static_expression | alternative_label 

generate_statement ::= for_generate_statement | if_generate_statement | case_generate_statement 

generate_statement_body ::= [ block_declarative_part BEGIN ] { concurrent_statement } [ END [ alternative_label ] ; ] 

generic_clause ::= GENERIC ( generic_list ) ; 

generic_list ::= generic_interface_list 
generic_map_aspect ::= GENERIC MAP ( generic_association_list ) 
graphic_character ::= basic_graphic_character | lower_case_letter | other_special_character 
group_constituent ::= name | character_literal 


group_constituent_list ::= group_constituent { , group_constituent } 
group_declaration ::= GROUP identifier : group_template_name ( group_constituent_list ) ; 
group_template_declaration ::= GROUP identifier IS ( entity_class_entry_list ) ; 
guarded_signal_specification ::= guarded_signal_list : type_mark 
identifier ::= basic_identifier | extended_identifier

identifier_list ::= identifier { , identifier } 

if_generate_statement ::= generate_label : IF [ alternative_label : ] condition GENERATE generate_statement_body 
    { elsif [ alternative_label : ] condition GENERATE 
    generate_statement_body } 
    [ ELSE [ alternative_label : ] GENERATE 
    generate_statement_body ] 
    END GENERATE [ generate_label ] ; 

if_statement ::= [ if_label : ] 
    IF condition then sequence_of_statements { elsif condition then sequence_of_statements } 
    [ ELSE sequence_of_statements ] END IF [ if_label ] ; 

incomplete_type_declaration ::= TYPE identifier ; 
index_constraint ::= ( discrete_range { , discrete_range } ) 
index_subtype_definition ::= type_mark RANGE <> 
indexed_name ::= prefix ( expression { , expression } )

instantiated_unit ::=
    [ COMPONENT ] component_name
    | ENTITY entity_name [ ( architecture_identifier ) ]
    | CONFIGURATION configuration_name

instantiation_list ::= instantiation_label { , instantiation_label } | OTHERS | ALL

integer ::= digit { [ _ ] digit } 
integer_type_definition ::= range_constraint 
interface_constant_declaration ::= [ CONSTANT ] identifier_list : [ IN ] subtype_indication [ := static_expression ] 

interface_declaration ::= 
      interface_object_declaration 
    | interface_type_declaration 
    | interface_subprogram_declaration 
    | interface_package_declaration 

interface_element ::= interface_declaration

interface_file_declaration ::= FILE identifier_list : subtype_indication 
interface_function_specification ::= [ PURE | IMPURE ] FUNCTION designator [ [ PARAMETER ] ( formal_parameter_list ) ] RETURN type_mark 

interface_incomplete_type_declaration ::= TYPE identifier 
interface_list ::= interface_element { ; interface_element }

interface_object_declaration ::= 
      interface_constant_declaration 
    | interface_signal_declaration 
    | interface_variable_declaration 
    | interface_file_declaration 
interface_package_declaration ::= PACKAGE identifier IS NEW uninstantiated_package_name interface_package_generic_map_aspect 

interface_package_generic_map_aspect ::= 
      generic_map_aspect 
    | GENERIC MAP ( <> ) 
    | GENERIC MAP ( DEFAULT ) 

interface_procedure_specification ::= PROCEDURE designator [ [ PARAMETER ] ( formal_parameter_list ) ] 

interface_signal_declaration ::= [ SIGNAL ] identifier_list : [ mode ] subtype_indication [ BUS ] [ := static_expression ] 

interface_subprogram_declaration ::= interface_subprogram_specification [ IS interface_subprogram_default ] 

interface_subprogram_default ::= subprogram_name | <> 

interface_subprogram_specification ::= interface_procedure_specification | interface_function_specification 
interface_type_declaration ::= interface_incomplete_type_declaration 

interface_variable_declaration ::= [ VARIABLE ] identifier_list : [ mode ] subtype_indication [ := static_expression ] 
iteration_scheme ::= WHILE condition | FOR loop_parameter_specification 

label ::= identifier

letter ::= upper_case_letter | lower_case_letter 
letter_or_digit ::= letter | digit 
library_clause ::= LIBRARY logical_name_list ; 
library_unit ::= primary_unit | secondary_unit 
literal ::= 
      numeric_literal 
    | enumeration_literal 
    | string_literal 
    | bit_string_literal 
    | NULL 

logical_expression ::=
      relation { AND relation }
    | relation { OR relation }
    | relation { XOR relation }
    | relation [ NAND relation ]
    | relation [ NOR relation ]
    | relation { XNOR relation }

logical_name ::= identifier 
logical_name_list ::= logical_name { , logical_name } 
logical_operator ::= AND | OR | NAND | NOR | XOR | XNOR 
loop_statement ::= [ loop_label : ] [ iteration_scheme ] LOOP sequence_of_statements END LOOP [ loop_label ] ; 

miscellaneous_operator ::= ** | ABS | NOT 

mode ::= IN | OUT | INOUT | BUFFER | LINKAGE 
multiplying_operator ::= * | / | MOD | REM 

name ::=
      simple_name
    | operator_symbol
    | character_literal
    | selected_name
    | indexed_name
    | slice_name
    | attribute_name
    | external_name

next_statement ::= [ label : ] NEXT [ loop_label ] [ WHEN condition ] ; 

null_statement ::= [ label : ] NULL ; 

numeric_literal ::= abstract_literal | physical_literal 
object_declaration ::=
      constant_declaration
    | signal_declaration
    | variable_declaration
    | file_declaration

operator_symbol ::= string_literal


package_body ::= PACKAGE BODY package_simple_name IS 
                    package_body_declarative_part 
                 END [ PACKAGE BODY ] [ package_simple_name ] ; 

package_body_declarative_item ::= 
      subprogram_declaration 
    | subprogram_body 
    | subprogram_instantiation_declaration 
    | package_declaration 
    | package_body 
    | package_instantiation_declaration 
    | type_declaration 
    | subtype_declaration 
    | constant_declaration 
    | variable_declaration 
    | file_declaration 
    | alias_declaration 
    | attribute_declaration 
    | attribute_specification 
    | use_clause 
    | group_template_declaration 
    | group_declaration 

package_body_declarative_part ::= { package_body_declarative_item } 
package_declaration ::= PACKAGE identifier IS 
                            package_header 
                            package_declarative_part 
                        END [ PACKAGE ] [ package_simple_name ] ; 

package_declarative_item ::= 
      subprogram_declaration 
    | subprogram_instantiation_declaration 
    | package_declaration 
    | package_instantiation_declaration 
    | type_declaration 
    | subtype_declaration 
    | constant_declaration 
    | signal_declaration 
    | variable_declaration 
    | file_declaration 
    | alias_declaration 
    | component_declaration 
    | attribute_declaration 
    | attribute_specification 
    | disconnection_specification 
    | use_clause 
    | group_template_declaration 
    | group_declaration 
    | PSL_Property_Declaration 
    | PSL_Sequence_Declaration 

package_declarative_part ::= { package_declarative_item } 
package_header ::= [ generic_clause [ generic_map_aspect ; ] ] 
package_instantiation_declaration ::= PACKAGE identifier IS NEW uninstantiated_package_name [ generic_map_aspect ] ; 

package_pathname ::= @ library_logical_name . { package_simple_name . } object_simple_name

parameter_specification ::= identifier IN discrete_range

partial_pathname ::= { pathname_element . } object_simple_name 

pathname_element ::= 
      entity_simple_name 
    | component_instantiation_label 
    | block_label
    | generate_statement_label [ ( static_expression ) ]
    | package_simple_name

physical_literal ::= [ abstract_literal ] unit_name 
physical_type_definition ::= range_constraint
    UNITS primary_unit_declaration 
        { secondary_unit_declaration } 
    END UNITS [ physical_type_simple_name ] 

port_clause ::= PORT ( port_list ) ; 
port_list ::= port_interface_list 
port_map_aspect ::= PORT MAP ( port_association_list ) 
prefix ::= name | function_call 

primary ::= 
      name 
    | literal 
    | aggregate 
    | function_call 
    | qualified_expression 
    | type_conversion 
    | allocator 
    | ( expression ) 

primary_unit ::=
      entity_declaration
    | configuration_declaration
    | package_declaration
    | package_instantiation_declaration
    | context_declaration
    | PSL_Verification_Unit

primary_unit_declaration ::= identifier ;

procedure_call ::= procedure_name [ ( actual_parameter_part ) ] 

procedure_call_statement ::= [ label : ] procedure_call ; 

procedure_specification ::= PROCEDURE designator subprogram_header [ [ PARAMETER ] ( formal_parameter_list ) ] 

process_declarative_item ::= 
      subprogram_declaration 
    | subprogram_body 
    | subprogram_instantiation_declaration 
    | package_declaration 
    | package_body 
    | PACKAGE instantiation_declaration 
    | type_declaration 
    | subtype_declaration 
    | constant_declaration 
    | variable_declaration 
    | file_declaration 
    | alias_declaration 
    | attribute_declaration 
    | attribute_specification 
    | use_clause 
    | group_template_declaration 
    | group_declaration 

process_declarative_part ::= { process_declarative_item } 

process_sensitivity_list ::= ALL | sensitivity_list 

process_statement ::= [ process_label : ] 
    [ POSTPONED ] PROCESS [ ( process_sensitivity_list ) ] [ IS ] 
        process_declarative_part 
    BEGIN 
        process_statement_part 
    END [ POSTPONED ] PROCESS [ process_label ] ; 

process_statement_part ::= { sequential_statement } 
protected_type_body ::= PROTECTED BODY protected_type_body_declarative_part END PROTECTED BODY [ protected_type_simple name ] 

protected_type_body_declarative_item ::= 
      subprogram_declaration 
    | subprogram_body 
    | subprogram_instantiation_declaration 
    | package_declaration 
    | package_body 
    | package_instantiation_declaration 
    | type_declaration 
    | subtype_declaration 
    | constant_declaration 
    | variable_declaration 
    | file_declaration 
    | alias_declaration 
    | attribute_declaration 
    | attribute_specification
    | use_clause
    | group_template_declaration
    | group_declaration

protected_type_body_declarative_part ::= { protected_type_body_declarative_item } 

protected_type_declaration ::= PROTECTED 
                                   protected_type_declarative_part 
                               END PROTECTED [ protected_type_simple_name ] 

protected_type_declarative_item ::= 
      subprogram_declaration 
    | subprogram_instantiation_declaration 
    | attribute_specification 
    | use_clause 

protected_type_declarative_part ::= { protected_type_declarative_item } 
protected_type_definition ::= 
      protected_type_declaration 
    | protected_type_body 

qualified_expression ::= 
      type_mark ' ( expression ) 
    | type_mark ' aggregate 

range ::= range_attribute_name | simple_expression direction simple_expression 
range_constraint ::= RANGE range 

record_constraint ::= ( record_element_constraint { , record_element_constraint } ) 
record_element_constraint ::= record_element_simple_name element_constraint 
record_element_resolution ::= record_element_simple_name resolution_indication 
record_resolution ::= record_element_resolution { , record_element_resolution } 
record_type_definition ::= RECORD element_declaration { element_declaration } END RECORD [ record_type_simple_name ]

relation ::= shift_expression [ relational_operator shift_expression ]
relational_operator ::= = | /= | < | <= | > | >= | ?= | ?/= | ?< | ?<= | ?> | ?>=

relative_pathname ::= { ^ . } partial_pathname 

report_statement ::= [ label : ] REPORT expression [ SEVERITY expression ] ; 

resolution_indication ::= resolution_function_name | ( element_resolution )

return_statement ::= [ label : ] RETURN [ expression ] ; 

scalar_type_definition ::= 
      enumeration_type_definition 
    | integer_type_definition 
    | floating_type_definition 
    | physical_type_definition 

secondary_unit ::= architecture_body | package_body 

secondary_unit_declaration ::= identifier = physical_literal ; 

selected_expressions ::= { expression WHEN choices , } expression WHEN choices 

selected_force_assignment ::= WITH expression SELECT [ ? ] target <= FORCE [ force_mode ] selected_expressions ; 

selected_name ::= prefix . suffix

selected_signal_assignment ::= selected_waveform_assignment | selected_force_assignment 

selected_variable_assignment ::= WITH expression SELECT [ ? ] 

target := selected_expressions ; 

selected_waveform_assignment ::= WITH expression SELECT [ ? ] target <= [ delay_mechanism ] selected_waveforms ; 

selected_waveforms ::= { waveform WHEN choices , } waveform WHEN choices 

sensitivity_clause ::= ON sensitivity_list

sensitivity_list ::= signal_name { , signal_name } 

sequence_of_statements ::= { sequential_statement } 

sequential_statement ::= 
      wait_statement 
    | assertion_statement 
    | report_statement 
    | signal_assignment_statement 
    | variable_assignment_statement 
    | procedure_call_statement 
    | if_statement 
    | case_statement 
    | loop_statement 
    | next_statement 
    | exit_statement 
    | return_statement 
    | null_statement 

shift_expression ::= simple_expression [ shift_operator simple_expression ]

shift_operator ::= SLL | SRL | SLA | SRA | ROL | ROR 

sign ::= + | â€“ 

signal_assignment_statement ::= 
      [ label : ] simple_signal_assignment 
    | [ label : ] conditional_signal_assignment 
    | [ label : ] selected_signal_assignment 

signal_declaration ::= SIGNAL identifier_list : subtype_indication [ signal_kind ] [ := expression ] ; 

signal_kind ::= REGISTER | BUS 

signal_list ::= signal_name { , signal_name } | OTHERS | ALL

signature ::= [ [ type_mark { , type_mark } ] [ RETURN type_mark ] ] 

simple_configuration_specification ::= FOR component_specification binding_indication ; [ END FOR ; ] 

simple_expression ::= [ sign ] term { adding_operator term }

simple_force_assignment ::= target <= FORCE [ force_mode ] expression ;

simple_name ::= identifier


simple_release_assignment ::= target <= release [ force_mode ] ; 

simple_signal_assignment ::= simple_waveform_assignment | simple_force_assignment | simple_release_assignment 

simple_waveform_assignment ::= target <= [ delay_mechanism ] waveform ; 
simple_variable_assignment ::= target := expression ; 

slice_name ::= prefix ( discrete_range )
string_literal ::= " { graphic_character } "
subprogram_body ::= subprogram_specification IS subprogram_declarative_part
    BEGIN
        subprogram_statement_part
    END [ subprogram_kind ] [ designator ] ;

subprogram_declaration ::= subprogram_specification ;

subprogram_declarative_item ::= 
      subprogram_declaration 
    | subprogram_body 
    | subprogram_instantiation_declaration 
    | package_declaration 
    | package_body 
    | package_instantiation_declaration 
    | type_declaration 
    | subtype_declaration 
    | constant_declaration 
    | variable_declaration 
    | file_declaration 
    | alias_declaration 
    | attribute_declaration 
    | attribute_specification 
    | use_clause 
    | group_template_declaration 
    | group_declaration 

subprogram_declarative_part ::= { subprogram_declarative_item } 

subprogram_header ::= [ GENERIC ( generic_list ) [ generic_map_aspect ] ]

subprogram_instantiation_declaration ::= subprogram_kind identifier IS NEW uninstantiated_subprogram_name [ signature ] [ generic_map_aspect ] ; 

subprogram_kind ::= PROCEDURE | FUNCTION 

subprogram_specification ::= procedure_specification | function_specification

subprogram_statement_part ::= { sequential_statement } 

subtype_declaration ::= SUBTYPE identifier IS subtype_indication ; 

subtype_indication ::= [ resolution_indication ] type_mark [ constraint ] 

suffix ::= simple_name | character_literal | operator_symbol | ALL 

target ::= name | aggregate

term ::= factor { multiplying_operator factor }

timeout_clause ::= FOR time_expression

tool_directive ::= ` identifier { graphic_character } 

type_conversion ::= type_mark ( expression ) 

type_declaration ::= full_type_declaration | incomplete_type_declaration 
type_definition ::= 
      scalar_type_definition 
    | composite_type_definition 
    | access_type_definition 
    | file_type_definition 
    | protected_type_definition 

type_mark ::= type_name | subtype_name 

unbounded_array_definition ::=
    ARRAY ( index_subtype_definition { , index_subtype_definition } )
    OF element_subtype_indication

use_clause ::= USE selected_name { , selected_name } ;

variable_assignment_statement ::= 
      [ label : ] simple_variable_assignment 
    | [ label : ] conditional_variable_assignment 
    | [ label : ] selected_variable_assignment 

variable_declaration ::= [ shared ] VARIABLE identifier_list : subtype_indication [ := expression ] ; 

verification_unit_binding_indication ::= USE VUNIT verification_unit_list 

verification_unit_list ::= verification_unit_name { , verification_unit_name } 

wait_statement ::= [ label : ] WAIT [ sensitivity_clause ] [ condition_clause ] [ timeout_clause ] ; 

waveform ::= waveform_element { , waveform_element } | unaffected 

waveform_element ::= value_expression [ AFTER time_expression ] | NULL [ AFTER time_expression ]

